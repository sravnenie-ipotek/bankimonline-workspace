#!/bin/bash

# QA Automation Runner Script - runqa alias
# Executes all four QA test suites and generates comprehensive report

echo "üöÄ Starting Comprehensive QA Automation Suite..."
echo "======================================================"

# Store timestamp for report naming
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
REPORT_DIR="server/docs/QA/reports"
MASTER_REPORT="$REPORT_DIR/qa-master-report-$TIMESTAMP.html"

# Ensure reports directory exists
mkdir -p "$REPORT_DIR"

# Array to store individual test results
declare -a TEST_RESULTS
declare -a TEST_DURATIONS

# Function to create individual test report
create_individual_report() {
    local test_name="$1"
    local report_file="$2"
    local instructions_path="$3"
    
    cat > "$report_file" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$test_name QA Report - $(date)</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; margin-bottom: 30px; }
        .status { padding: 12px 24px; border-radius: 8px; font-weight: bold; margin: 20px 0; }
        .status.framework { background: #e3f2fd; color: #1976d2; border: 2px solid #90caf9; }
        .instructions { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .note { background: #fff3cd; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ffc107; }
        .next-steps { background: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0; }
        code { background: #f1f3f4; padding: 2px 6px; border-radius: 4px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>$test_name QA Report</h1>
        
        <div class="status framework">
            ‚úÖ Framework Ready - Awaiting Test Implementation
        </div>
        
        <div class="instructions">
            <h3>üìã Test Instructions</h3>
            <p><strong>Instructions File:</strong> <code>$instructions_path</code></p>
            <p>This report shows that the QA framework is ready for <strong>$test_name</strong> testing.</p>
        </div>
        
        <div class="note">
            <h3>‚ö†Ô∏è Important Note</h3>
            <p>This is a <strong>framework placeholder report</strong>. To enable actual testing:</p>
            <ol>
                <li>Replace placeholder test execution in <code>runqa.sh</code></li>
                <li>Integrate with your test runner (Cypress, Playwright, etc.)</li>
                <li>Add real test validation logic</li>
            </ol>
        </div>
        
        <div class="next-steps">
            <h3>üöÄ Next Steps for $test_name</h3>
            <ul>
                <li>Review instructions at: <code>$instructions_path</code></li>
                <li>Implement actual test execution</li>
                <li>Add real validation logic</li>
                <li>Generate actual test results</li>
            </ul>
        </div>
        
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666; text-align: center;">
            <p>Generated by runqa framework on $(date)</p>
        </div>
    </div>
</body>
</html>
EOF
    
    echo "üìÑ Individual report created: $report_file"
}

# Function to create success report with real test results
create_success_report() {
    local test_name="$1"
    local report_file="$2"
    local instructions_path="$3"
    local test_spec="$4"
    
    cat > "$report_file" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$test_name QA Report - PASSED</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; margin-bottom: 30px; }
        .status { padding: 12px 24px; border-radius: 8px; font-weight: bold; margin: 20px 0; }
        .status.passed { background: #d4edda; color: #155724; border: 2px solid #c3e6cb; }
        .instructions { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .test-details { background: #e3f2fd; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .next-steps { background: #d1ecf1; padding: 20px; border-radius: 8px; margin: 20px 0; }
        code { background: #f1f3f4; padding: 2px 6px; border-radius: 4px; }
        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .metric { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
        .metric-value { font-size: 24px; font-weight: bold; color: #28a745; }
    </style>
</head>
<body>
    <div class="container">
        <h1>$test_name QA Report</h1>
        
        <div class="status passed">
            ‚úÖ ALL TESTS PASSED - Production Ready!
        </div>
        
        <div class="test-details">
            <h3>üß™ Test Execution Details</h3>
            <p><strong>Test Suite:</strong> $test_name</p>
            <p><strong>Test Spec:</strong> <code>$test_spec</code></p>
            <p><strong>Instructions:</strong> <code>$instructions_path</code></p>
            <p><strong>Execution Time:</strong> $(date)</p>
            <p><strong>Browser:</strong> Chrome (Headless)</p>
            <p><strong>Status:</strong> <span style="color: #28a745; font-weight: bold;">PASSED</span></p>
        </div>
        
        <div class="metrics">
            <div class="metric">
                <div class="metric-value">‚úÖ</div>
                <div>Test Status</div>
            </div>
            <div class="metric">
                <div class="metric-value">0</div>
                <div>Failed Tests</div>
            </div>
            <div class="metric">
                <div class="metric-value">100%</div>
                <div>Pass Rate</div>
            </div>
            <div class="metric">
                <div class="metric-value">READY</div>
                <div>Production Status</div>
            </div>
        </div>
        
        <div class="next-steps">
            <h3>üöÄ Production Deployment Status</h3>
            <p><strong>‚úÖ $test_name is ready for production deployment!</strong></p>
            <ul>
                <li>All tests passed successfully</li>
                <li>No critical issues detected</li>
                <li>Functionality validated according to specifications</li>
                <li>Safe to proceed with deployment</li>
            </ul>
        </div>
        
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666; text-align: center;">
            <p>Real Cypress test execution completed on $(date)</p>
            <p>View detailed test results in Cypress dashboard or CI logs</p>
        </div>
    </div>
</body>
</html>
EOF
    
    echo "üìÑ Success report created: $report_file"
}

# Function to create failure report with real test results
create_failure_report() {
    local test_name="$1"
    local report_file="$2"
    local instructions_path="$3"
    local test_spec="$4"
    local exit_code="$5"
    
    cat > "$report_file" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$test_name QA Report - FAILED</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; margin-bottom: 30px; }
        .status { padding: 12px 24px; border-radius: 8px; font-weight: bold; margin: 20px 0; }
        .status.failed { background: #f8d7da; color: #721c24; border: 2px solid #f5c6cb; }
        .instructions { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .test-details { background: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .critical-warning { background: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc3545; }
        code { background: #f1f3f4; padding: 2px 6px; border-radius: 4px; }
        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .metric { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
        .metric-value { font-size: 24px; font-weight: bold; color: #dc3545; }
    </style>
</head>
<body>
    <div class="container">
        <h1>$test_name QA Report</h1>
        
        <div class="status failed">
            ‚ùå TESTS FAILED - DO NOT DEPLOY TO PRODUCTION!
        </div>
        
        <div class="critical-warning">
            <h3>üö® CRITICAL: Production Deployment Blocked</h3>
            <p><strong>$test_name tests have failed.</strong> This indicates critical issues that must be resolved before production deployment.</p>
            <p><strong>Exit Code:</strong> $exit_code</p>
        </div>
        
        <div class="test-details">
            <h3>üß™ Test Execution Details</h3>
            <p><strong>Test Suite:</strong> $test_name</p>
            <p><strong>Test Spec:</strong> <code>$test_spec</code></p>
            <p><strong>Instructions:</strong> <code>$instructions_path</code></p>
            <p><strong>Execution Time:</strong> $(date)</p>
            <p><strong>Browser:</strong> Chrome (Headless)</p>
            <p><strong>Status:</strong> <span style="color: #dc3545; font-weight: bold;">FAILED</span></p>
            <p><strong>Exit Code:</strong> $exit_code</p>
        </div>
        
        <div class="metrics">
            <div class="metric">
                <div class="metric-value">‚ùå</div>
                <div>Test Status</div>
            </div>
            <div class="metric">
                <div class="metric-value">$exit_code</div>
                <div>Exit Code</div>
            </div>
            <div class="metric">
                <div class="metric-value">BLOCKED</div>
                <div>Production Status</div>
            </div>
            <div class="metric">
                <div class="metric-value">CRITICAL</div>
                <div>Issue Level</div>
            </div>
        </div>
        
        <div class="critical-warning">
            <h3>üîß Required Actions Before Production</h3>
            <ol>
                <li><strong>Check Cypress logs</strong> in mainapp/cypress/screenshots and mainapp/cypress/videos</li>
                <li><strong>Review failed test details</strong> in the Cypress dashboard</li>
                <li><strong>Fix the identified issues</strong> in the codebase</li>
                <li><strong>Re-run QA tests</strong> using <code>runqa</code> command</li>
                <li><strong>Ensure all tests pass</strong> before proceeding with deployment</li>
            </ol>
        </div>
        
        <div class="instructions">
            <h3>üìã Debug Information</h3>
            <p><strong>To debug this failure:</strong></p>
            <ul>
                <li>Run the specific test manually: <code>cd mainapp && npx cypress run --spec "$test_spec"</code></li>
                <li>Run in headed mode to see what's happening: <code>npx cypress run --spec "$test_spec" --headed</code></li>
                <li>Check the test instructions: <code>$instructions_path</code></li>
                <li>Review screenshots and videos in the cypress folder</li>
            </ul>
        </div>
        
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666; text-align: center;">
            <p>Real Cypress test execution failed on $(date)</p>
            <p><strong style="color: #dc3545;">Production deployment is blocked until all tests pass</strong></p>
        </div>
    </div>
</body>
</html>
EOF
    
    echo "üìÑ Failure report created: $report_file"
}

echo "üìç Test Environment: http://localhost:5173"
echo "üìÖ Test Date: $(date)"
echo "‚è∞ Starting Time: $(date +"%H:%M:%S")"
echo ""

# Function to run individual QA test suite
run_qa_test() {
    local test_name="$1"
    local instructions_path="$2"
    local start_time=$(date +%s)
    
    echo "üîÑ Running $test_name QA Tests..."
    echo "üìã Instructions: $instructions_path"
    
    # Create individual report filename
    local test_name_lower=$(echo "$test_name" | tr '[:upper:]' '[:lower:]')
    local individual_report="$REPORT_DIR/$test_name_lower-qa-report-$TIMESTAMP.html"
    
    # Execute REAL Cypress tests based on test suite
    echo "üîß Starting real Cypress test execution for $test_name..."
    
    # Change to mainapp directory for Cypress execution
    cd mainapp
    
    local cypress_result=0
    local test_spec=""
    
    case "$test_name" in
        "MenuNavigation")
            # Run comprehensive menu and navigation tests
            test_spec="cypress/e2e/menu-navigation-comprehensive.cy.ts"
            echo "üçΩÔ∏è Running Menu & Navigation tests..."
            CYPRESS_BASE_URL=http://localhost:5173 npx cypress run --spec "$test_spec" --headless --browser chrome
            cypress_result=$?
            ;;
        "CalculateCredit")
            # Run credit calculator comprehensive tests
            test_spec="cypress/e2e/credit-calculator-comprehensive.cy.ts"
            echo "üí≥ Running Credit Calculator tests..."
            CYPRESS_BASE_URL=http://localhost:5173 npx cypress run --spec "$test_spec" --headless --browser chrome
            cypress_result=$?
            ;;
        "MortgageSteps")
            # Run mortgage calculator comprehensive tests
            test_spec="cypress/e2e/mortgage-calculator-complete-journey.cy.ts"
            echo "üè† Running Mortgage Calculator tests..."
            CYPRESS_BASE_URL=http://localhost:5173 npx cypress run --spec "$test_spec" --headless --browser chrome
            cypress_result=$?
            ;;
        "RefinanceCredit")
            # Run refinance credit comprehensive tests
            test_spec="cypress/e2e/refinance-credit-comprehensive-qa.cy.ts"
            echo "üîÑ Running Refinance Credit tests..."
            CYPRESS_BASE_URL=http://localhost:5173 npx cypress run --spec "$test_spec" --headless --browser chrome
            cypress_result=$?
            ;;
        "RefinanceMortgage")
            # Run refinance mortgage comprehensive tests
            test_spec="cypress/e2e/refinance-mortgage-comprehensive.cy.ts"
            echo "üè° Running Refinance Mortgage tests..."
            CYPRESS_BASE_URL=http://localhost:5173 npx cypress run --spec "$test_spec" --headless --browser chrome
            cypress_result=$?
            ;;
        *)
            echo "‚ö†Ô∏è Unknown test suite: $test_name"
            cypress_result=1
            ;;
    esac
    
    # Change back to root directory
    cd ..
    
    # Generate report based on actual test results
    if [ $cypress_result -eq 0 ]; then
        create_success_report "$test_name" "$individual_report" "$instructions_path" "$test_spec"
        local result="PASSED"
        echo "‚úÖ $test_name tests PASSED"
    else
        create_failure_report "$test_name" "$individual_report" "$instructions_path" "$test_spec" "$cypress_result"
        local result="FAILED"
        echo "‚ùå $test_name tests FAILED (exit code: $cypress_result)"
    fi
    
    # For now, we'll simulate the test execution and create a basic report structure
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    echo "‚úÖ $test_name completed in ${duration}s"
    echo "üìÑ Report: $individual_report"
    echo ""
    
    # Store results for master report
    TEST_RESULTS+=("$test_name:$result:$duration:$individual_report")
    TEST_DURATIONS+=($duration)
    
    return 0
}

# Execute all five QA test suites
echo "üéØ Executing QA Test Suites..."
echo "------------------------------"

# 1. Menu & Navigation Tests
run_qa_test "MenuNavigation" "/Users/michaelmishayev/Projects/bankDev2_standalone/server/docs/QA/menuQA/instructions.md"

# 2. Calculate Credit Tests (Steps 1-4)
run_qa_test "CalculateCredit" "/Users/michaelmishayev/Projects/bankDev2_standalone/server/docs/QA/calculateCredit1,2,3,4/instructions.md"

# 3. Mortgage Tests (Steps 1-4) 
run_qa_test "MortgageSteps" "/Users/michaelmishayev/Projects/bankDev2_standalone/server/docs/QA/mortgageStep1,2,3,4/instructions.md"

# 4. Refinance Credit Tests (Steps 1-4)
run_qa_test "RefinanceCredit" "/Users/michaelmishayev/Projects/bankDev2_standalone/server/docs/QA/refinanceCredit1,2,3,4/instructions.md"

# 5. Refinance Mortgage Tests (Steps 1-4)
run_qa_test "RefinanceMortgage" "/Users/michaelmishayev/Projects/bankDev2_standalone/server/docs/QA/refinanceMortgage1,2,3,4/instructions.md"

# Calculate total execution time
TOTAL_DURATION=0
for duration in "${TEST_DURATIONS[@]}"; do
    TOTAL_DURATION=$((TOTAL_DURATION + duration))
done

echo "üìä All Tests Complete!"
echo "‚è±Ô∏è  Total Duration: ${TOTAL_DURATION}s"
echo ""

# Generate Master Report
echo "üìÑ Generating Master QA Report..."
echo "================================="

# Create comprehensive HTML report following the specifications
cat > "$MASTER_REPORT" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QA Master Report - $TIMESTAMP</title>
    <style>
        :root {
            --primary: #2563eb;
            --danger: #dc2626;
            --warning: #f59e0b;
            --success: #10b981;
            --dark: #1f2937;
            --light: #f9fafb;
            --shadow: 0 10px 25px rgba(0,0,0,0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 2rem;
        }

        .report-container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .report-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            text-align: center;
        }

        .report-header h1 {
            color: var(--dark);
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }

        .environment-banner {
            padding: 12px 20px;
            margin: 15px 0;
            border-radius: 8px;
            font-weight: bold;
            text-align: center;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            border: 2px solid #047857;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .metric-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: transform 0.3s ease;
        }

        .metric-card:hover {
            transform: translateY(-5px);
        }

        .metric-card h3 {
            color: var(--dark);
            margin-bottom: 0.5rem;
        }

        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: var(--primary);
        }

        .test-suite-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin: 1.5rem 0;
            box-shadow: var(--shadow);
        }

        .test-suite-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--light);
        }

        .suite-name {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--dark);
        }

        .suite-status {
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: bold;
            text-transform: uppercase;
        }

        .status-success {
            background: var(--success);
            color: white;
        }

        .status-warning {
            background: var(--warning);
            color: white;
        }

        .status-danger {
            background: var(--danger);
            color: white;
        }
        
        .status-success {
            background: var(--success);
            color: white;
        }

        .suite-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .detail-item {
            padding: 1rem;
            background: var(--light);
            border-radius: 8px;
        }

        .detail-label {
            font-weight: bold;
            color: var(--dark);
            display: block;
            margin-bottom: 0.5rem;
        }

        .detail-value {
            color: var(--primary);
            font-size: 1.1rem;
        }

        .report-footer {
            text-align: center;
            margin-top: 3rem;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
        }

        .footer-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            transform: scale(1.05);
            box-shadow: 0 10px 20px rgba(37, 99, 235, 0.4);
        }

        .language-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }

        .lang-btn {
            padding: 8px 16px;
            border: 2px solid white;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .lang-btn.active {
            background: white;
            color: var(--primary);
        }

        .ru { display: none; }
        body.ru .ru { display: inline; }
        body.ru .en { display: none; }

        @media (max-width: 768px) {
            .metrics-grid {
                grid-template-columns: 1fr;
            }
            
            .suite-details {
                grid-template-columns: 1fr;
            }
            
            .footer-buttons {
                flex-direction: column;
                align-items: center;
            }
        }

        @media print {
            body {
                background: white;
            }
            
            .no-print {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="language-toggle no-print">
        <button class="lang-btn active" onclick="setLanguage('en')">EN</button>
        <button class="lang-btn" onclick="setLanguage('ru')">RU</button>
    </div>

    <div class="report-container">
        <!-- Header -->
        <header class="report-header">
            <h1>
                <span class="en">üéØ QA Master Report</span>
                <span class="ru">üéØ –ú–∞—Å—Ç–µ—Ä –û—Ç—á—ë—Ç QA</span>
            </h1>
            
            <div class="environment-banner">
                <span class="en">üõ†Ô∏è DEVELOPMENT ENVIRONMENT - Safe for Testing</span>
                <span class="ru">üõ†Ô∏è –°–†–ï–î–ê –†–ê–ó–†–ê–ë–û–¢–ö–ò - –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</span>
            </div>
            
            <div class="header-meta">
                <p><strong>Generated:</strong> $(date)</p>
                <p><strong>Environment:</strong> http://localhost:5173</p>
                <p><strong>Total Duration:</strong> ${TOTAL_DURATION}s</p>
                <p><strong>Test Suites:</strong> 5</p>
            </div>
        </header>

        <!-- Real Test Execution Status -->
        <section class="test-execution-status">
            <div style="background: #d4edda; border: 2px solid #c3e6cb; border-radius: 12px; padding: 20px; margin: 20px 0;">
                <h3 style="color: #155724; margin-bottom: 15px;">üß™ Real Cypress Test Execution</h3>
                <p style="color: #155724; margin-bottom: 10px;">
                    <strong>Production-Ready QA Testing</strong> - Real Cypress tests executed for deployment validation.
                </p>
                <p style="color: #155724; margin-bottom: 15px;">
                    Each test suite runs comprehensive Cypress tests to validate functionality before production deployment.
                </p>
                <div style="background: rgba(255,255,255,0.7); padding: 15px; border-radius: 8px;">
                    <strong>Test Execution Features:</strong>
                    <ul style="margin: 10px 0 0 20px; color: #155724;">
                        <li>Real browser automation with Chrome headless</li>
                        <li>Comprehensive test coverage per QA instruction specifications</li>
                        <li>Production deployment blocking on test failures</li>
                        <li>Detailed failure reports with debugging information</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Executive Summary -->
        <section class="metrics-grid">
            <div class="metric-card">
                <h3>
                    <span class="en">Total Test Suites</span>
                    <span class="ru">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤</span>
                </h3>
                <div class="metric-value">5</div>
                <div class="metric-change">Menu Navigation, Calculate Credit, Mortgage, Refinance Credit, Refinance Mortgage</div>
            </div>
            
            <div class="metric-card">
                <h3>
                    <span class="en">Execution Time</span>
                    <span class="ru">–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</span>
                </h3>
                <div class="metric-value">${TOTAL_DURATION}s</div>
                <div class="metric-change">$(date +"%H:%M:%S")</div>
            </div>
            
            <div class="metric-card">
                <h3>
                    <span class="en">Environment</span>
                    <span class="ru">–°—Ä–µ–¥–∞</span>
                </h3>
                <div class="metric-value">DEV</div>
                <div class="metric-change">localhost:5173</div>
            </div>
            
            <div class="metric-card">
                <h3>
                    <span class="en">Report Status</span>
                    <span class="ru">–°—Ç–∞—Ç—É—Å –æ—Ç—á—ë—Ç–∞</span>
                </h3>
                <div class="metric-value">‚úÖ</div>
                <div class="metric-change">Ready for Review</div>
            </div>
        </section>

        <!-- Test Suites Results -->
EOF

# Add individual test suite results to the report
for result in "${TEST_RESULTS[@]}"; do
    IFS=':' read -r suite_name suite_result suite_duration suite_report <<< "$result"
    
    cat >> "$MASTER_REPORT" << EOF
        <section class="test-suite-section">
            <div class="test-suite-header">
                <div class="suite-name">$suite_name</div>
                <div class="suite-status status-$([ "$suite_result" = "PASSED" ] && echo "success" || echo "danger")">$([ "$suite_result" = "PASSED" ] && echo "PASSED" || echo "FAILED")</div>
            </div>
            
            <div class="suite-details">
                <div class="detail-item">
                    <span class="detail-label">
                        <span class="en">Duration</span>
                        <span class="ru">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</span>
                    </span>
                    <span class="detail-value">${suite_duration}s</span>
                </div>
                
                <div class="detail-item">
                    <span class="detail-label">
                        <span class="en">Status</span>
                        <span class="ru">–°—Ç–∞—Ç—É—Å</span>
                    </span>
                    <span class="detail-value">$([ "$suite_result" = "PASSED" ] && echo "Test Passed" || echo "Test Failed")</span>
                </div>
                
                <div class="detail-item">
                    <span class="detail-label">
                        <span class="en">Report</span>
                        <span class="ru">–û—Ç—á—ë—Ç</span>
                    </span>
                    <span class="detail-value">
                        <a href="$(basename "$suite_report")" target="_blank">View Report</a>
                    </span>
                </div>
                
                <div class="detail-item">
                    <span class="detail-label">
                        <span class="en">Test Type</span>
                        <span class="ru">–¢–∏–ø —Ç–µ—Å—Ç–∞</span>
                    </span>
                    <span class="detail-value">Cypress E2E</span>
                </div>
            </div>
        </section>
EOF
done

# Complete the report
cat >> "$MASTER_REPORT" << EOF
        <!-- Footer -->
        <footer class="report-footer">
            <h3>
                <span class="en">üìã Report Actions</span>
                <span class="ru">üìã –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç—á—ë—Ç–æ–º</span>
            </h3>
            
            <div class="footer-buttons">
                <button class="btn btn-primary" onclick="window.print()">
                    <span class="en">üñ®Ô∏è Print Report</span>
                    <span class="ru">üñ®Ô∏è –ü–µ—á–∞—Ç—å –æ—Ç—á—ë—Ç–∞</span>
                </button>
                
                <a href="#" class="btn btn-primary" onclick="downloadReport()">
                    <span class="en">üíæ Download PDF</span>
                    <span class="ru">üíæ –°–∫–∞—á–∞—Ç—å PDF</span>
                </a>
                
                <button class="btn btn-primary" onclick="shareReport()">
                    <span class="en">üì§ Share Report</span>
                    <span class="ru">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ç—á—ë—Ç–æ–º</span>
                </button>
            </div>
            
            <div style="margin-top: 2rem; color: #6b7280;">
                <p>
                    <span class="en">Generated by QA Automation Suite - $(date)</span>
                    <span class="ru">–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º QA –Ω–∞–±–æ—Ä–æ–º - $(date)</span>
                </p>
            </div>
        </footer>
    </div>

    <script>
        // Language toggle functionality
        function setLanguage(lang) {
            document.body.className = lang;
            localStorage.setItem('report-language', lang);
            
            // Update active button
            document.querySelectorAll('.lang-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
        }

        // Report actions
        function downloadReport() {
            window.print(); // For now, use print dialog to save as PDF
        }

        function shareReport() {
            if (navigator.share) {
                navigator.share({
                    title: 'QA Master Report',
                    text: 'QA Automation Test Results',
                    url: window.location.href
                });
            } else {
                // Fallback - copy to clipboard
                navigator.clipboard.writeText(window.location.href);
                alert('Report URL copied to clipboard');
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            const savedLang = localStorage.getItem('report-language') || 'en';
            setLanguage(savedLang);
        });
    </script>
</body>
</html>
EOF

echo "‚úÖ Master Report Generated: $MASTER_REPORT"
echo ""

# Summary
echo "üéâ QA Automation Complete!"
echo "=========================="
echo "üìä Test Suites Executed: 5"
echo "‚è±Ô∏è  Total Duration: ${TOTAL_DURATION}s"
echo "üìÑ Master Report: $MASTER_REPORT"
echo "üìÅ Reports Directory: $REPORT_DIR"
echo ""

# Open report if on macOS
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "üåê Opening report in browser..."
    open "$MASTER_REPORT"
fi

echo "‚ú® runqa execution completed successfully!"