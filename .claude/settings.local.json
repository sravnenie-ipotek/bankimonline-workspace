{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(unzip:*)",
      "Bash(python3:*)",
      "Bash(mkdir:*)",
      "Bash(rg:*)",
      "Bash(node test-db.js)",
      "Bash(node:*)",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "Bash(npx vite:*)",
      "Bash(rm:*)",
      "Bash(npm install)",
      "Bash(npx:*)",
      "Bash(npm install:*)",
      "Bash(pkill:*)",
      "Bash(kill:*)",
      "Bash(cat:*)",
      "Bash(npm run start:db:*)",
      "mcp__ide__getDiagnostics",
      "Bash(claude mcp:*)",
      "mcp__Atlassian__confluence_get_page",
      "mcp__Atlassian__confluence_get_page_children",
      "mcp__Figma__get_image",
      "mcp__Atlassian__confluence_search",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_install",
      "Bash(npm start)",
      "Bash(npm run build:*)",
      "Bash(npm run preview:*)",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_resize",
      "mcp__Figma__get_code",
      "Bash(true)",
      "Bash(npm run:*)",
      "mcp__playwright__browser_press_key",
      "Bash(npm cache clean:*)",
      "WebFetch(domain:bankimonline.atlassian.net)",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_tab_close",
      "Bash(mv:*)",
      "Bash(git checkout:*)",
      "Bash(pgrep:*)",
      "Bash(open:*)",
      "mcp__playwright__browser_tab_new",
      "Bash(export:*)",
      "Bash(env)",
      "Bash(echo:*)",
      "Bash(printenv)",
      "Bash(gtimeout:*)",
      "Bash(psql:*)",
      "Bash(PGPASSWORD=HBxrSXZkMmbBEPgEfgKJOUvdUBFMqBcZ psql -h roundhouse.proxy.rlwy.net -p 29351 -U postgres -d railway -c \"\nINSERT INTO content_items (content_key, component_type, category, screen_location, status) VALUES\n  (''app.mortgage.step.mobile_step_1'', ''text'', ''progress'', ''mortgage_calculation'', ''active''),\n  (''app.mortgage.step.mobile_step_2'', ''text'', ''progress'', ''mortgage_calculation'', ''active''),\n  (''app.mortgage.step.mobile_step_3'', ''text'', ''progress'', ''mortgage_calculation'', ''active''),\n  (''app.mortgage.step.mobile_step_4'', ''text'', ''progress'', ''mortgage_calculation'', ''active'')\nON CONFLICT (content_key) DO NOTHING;\nSELECT content_key FROM content_items WHERE screen_location = ''mortgage_calculation'';\n\")",
      "Bash(cp:*)",
      "mcp__playwright__browser_hover",
      "Bash(chmod:*)",
      "Bash(/tmp/create_mortgage_step4_content.sh:*)",
      "Bash(/tmp/create_bank_card_content.sh:*)",
      "Bash(/tmp/create_refinance_step1_content.sh:*)",
      "Bash(/tmp/create_refinance_dropdowns.sh:*)",
      "mcp__YouTrack__search_issues",
      "Bash(CONTENT_DATABASE_URL=postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway node -e \"\nconst { Pool } = require(''pg'');\nconst pool = new Pool({ connectionString: process.env.CONTENT_DATABASE_URL });\n\nasync function checkMissingKeys() {\n  try {\n    const keysToCheck = [\n      ''calculate_mortgage_final'',\n      ''calculate_mortgage_warning'', \n      ''calculate_mortgage_filter_1'',\n      ''calculate_mortgage_filter_2'',\n      ''calculate_mortgage_filter_3'', \n      ''calculate_mortgage_filter_4'',\n      ''prime_description'',\n      ''up_to_33_percent'',\n      ''4_to_30_years'',\n      ''prime_rate_structure'',\n      ''fixed_inflation_description'',\n      ''up_to_70_percent'',\n      ''5_to_30_years'',\n      ''fixed_rate_structure'',\n      ''variable_inflation_description'',\n      ''up_to_75_percent'',\n      ''4_to_25_years'',\n      ''variable_rate_structure''\n    ];\n    \n    for (const key of keysToCheck) {\n      const result = await pool.query(''SELECT key, content_en, content_he, content_ru, page FROM locales WHERE key = $1'', [key]);\n      if (result.rows.length === 0) {\n        console.log(''MISSING:'', key);\n      } else {\n        console.log(''EXISTS:'', key, ''- page:'', result.rows[0].page || ''null'');\n      }\n    }\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\ncheckMissingKeys();\n\")",
      "Bash(CONTENT_DATABASE_URL=postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway node -e \"\nconst { Pool } = require(''pg'');\nconst pool = new Pool({ connectionString: process.env.CONTENT_DATABASE_URL });\n\nasync function checkTables() {\n  try {\n    const result = await pool.query(\"\"SELECT table_name FROM information_schema.tables WHERE table_schema = ''public''\"\");\n    console.log(''Available tables:'');\n    result.rows.forEach(row => console.log(''-'', row.table_name));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\ncheckTables();\n\")",
      "Bash(CONTENT_DATABASE_URL=postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway node -e \"\nconst { Pool } = require(''pg'');\nconst pool = new Pool({ connectionString: process.env.CONTENT_DATABASE_URL });\n\nasync function checkContentTables() {\n  try {\n    // Check content_items structure\n    console.log(''=== content_items structure ==='');\n    const itemsResult = await pool.query(\"\"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = ''content_items''\"\");\n    itemsResult.rows.forEach(row => console.log(row.column_name, ''-'', row.data_type));\n    \n    // Check content_translations structure  \n    console.log(''\\n=== content_translations structure ==='');\n    const transResult = await pool.query(\"\"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = ''content_translations''\"\");\n    transResult.rows.forEach(row => console.log(row.column_name, ''-'', row.data_type));\n    \n    // Sample content_items\n    console.log(''\\n=== Sample content_items ==='');\n    const sampleItems = await pool.query(''SELECT id, key, category_id, description FROM content_items LIMIT 5'');\n    sampleItems.rows.forEach(row => console.log(''ID:'', row.id, ''KEY:'', row.key, ''CATEGORY:'', row.category_id));\n    \n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\ncheckContentTables();\n\")",
      "Bash(CONTENT_DATABASE_URL=postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway node -e \"\nconst { Pool } = require(''pg'');\nconst pool = new Pool({ connectionString: process.env.CONTENT_DATABASE_URL });\n\nasync function findMissingKeys() {\n  try {\n    const keysToCheck = [\n      ''calculate_mortgage_final'',\n      ''calculate_mortgage_warning'', \n      ''calculate_mortgage_filter_1'',\n      ''calculate_mortgage_filter_2'',\n      ''calculate_mortgage_filter_3'', \n      ''calculate_mortgage_filter_4'',\n      ''prime_description'',\n      ''up_to_33_percent'',\n      ''4_to_30_years'',\n      ''prime_rate_structure'',\n      ''fixed_inflation_description'',\n      ''up_to_70_percent'',\n      ''5_to_30_years'',\n      ''fixed_rate_structure'',\n      ''variable_inflation_description'',\n      ''up_to_75_percent'',\n      ''4_to_25_years'',\n      ''variable_rate_structure''\n    ];\n    \n    for (const key of keysToCheck) {\n      const result = await pool.query(''SELECT content_key, category FROM content_items WHERE content_key = $1 OR legacy_translation_key = $1'', [key]);\n      if (result.rows.length === 0) {\n        console.log(''MISSING:'', key);\n      } else {\n        console.log(''EXISTS:'', key, ''- category:'', result.rows[0].category);\n      }\n    }\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\nfindMissingKeys();\n\")",
      "Bash(CONTENT_DATABASE_URL=postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway node -e \"\nconst { Pool } = require(''pg'');\nconst pool = new Pool({ connectionString: process.env.CONTENT_DATABASE_URL });\n\nasync function findMortgageStep4Content() {\n  try {\n    // Look for existing mortgage step 4 content\n    const result = await pool.query(\"\"SELECT content_key, category, screen_location FROM content_items WHERE category LIKE ''%mortgage%'' AND (screen_location LIKE ''%step4%'' OR screen_location LIKE ''%step_4%'' OR content_key LIKE ''%step4%'')\"\");\n    console.log(''=== Existing Mortgage Step 4 Content ==='');\n    result.rows.forEach(row => console.log(''KEY:'', row.content_key, ''CATEGORY:'', row.category, ''SCREEN:'', row.screen_location));\n    \n    // Look for any mortgage_step4 category \n    const categoryResult = await pool.query(\"\"SELECT DISTINCT category FROM content_items WHERE category LIKE ''%mortgage_step4%''\"\");\n    console.log(''\\n=== Mortgage Step 4 Categories ==='');\n    categoryResult.rows.forEach(row => console.log(''CATEGORY:'', row.category));\n    \n    // Look for existing step 4 content across all services\n    const step4Result = await pool.query(\"\"SELECT content_key, category, screen_location FROM content_items WHERE screen_location LIKE ''%step4%'' OR screen_location LIKE ''%step_4%''\"\");\n    console.log(''\\n=== All Step 4 Content ==='');\n    step4Result.rows.forEach(row => console.log(''KEY:'', row.content_key, ''CATEGORY:'', row.category, ''SCREEN:'', row.screen_location));\n    \n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\nfindMortgageStep4Content();\n\")",
      "Bash(CONTENT_DATABASE_URL=postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway node -e \"\nconst { Pool } = require(''pg'');\nconst pool = new Pool({ connectionString: process.env.CONTENT_DATABASE_URL });\n\nasync function getMortgageStep4Translations() {\n  try {\n    const keyMappings = [\n      { oldKey: ''calculate_mortgage_final'', newKey: ''app.mortgage.step4.title'' },\n      { oldKey: ''calculate_mortgage_warning'', newKey: ''app.mortgage.step4.warning'' },\n      { oldKey: ''calculate_mortgage_parameters'', newKey: ''app.mortgage.step4.parameters_title'' },\n      { oldKey: ''calculate_mortgage_profile_title'', newKey: ''app.mortgage.step4.profile_title'' },\n      { oldKey: ''calculate_mortgage_filter_title'', newKey: ''app.mortgage.step4.filter_title'' },\n      { oldKey: ''calculate_mortgage_parameters_initial'', newKey: ''app.mortgage.step4.parameters_initial'' },\n      { oldKey: ''calculate_mortgage_parameters_cost'', newKey: ''app.mortgage.step4.parameters_cost'' },\n      { oldKey: ''calculate_mortgage_parameters_period'', newKey: ''app.mortgage.step4.parameters_period'' },\n      { oldKey: ''calculate_mortgage_parameters_months'', newKey: ''app.mortgage.step4.parameters_months'' },\n      { oldKey: ''calculate_mortgage_filter_1'', newKey: ''app.mortgage.step4.filter_option_1'' },\n      { oldKey: ''calculate_mortgage_filter_2'', newKey: ''app.mortgage.step4.filter_option_2'' },\n      { oldKey: ''calculate_mortgage_filter_3'', newKey: ''app.mortgage.step4.filter_option_3'' },\n      { oldKey: ''calculate_mortgage_filter_4'', newKey: ''app.mortgage.step4.filter_option_4'' }\n    ];\n    \n    for (const mapping of keyMappings) {\n      const result = await pool.query(\\`\n        SELECT ci.content_key, ct.language_code, ct.content_value \n        FROM content_items ci \n        JOIN content_translations ct ON ci.id = ct.content_item_id \n        WHERE ci.content_key = $1 AND ct.status = ''approved''\n        ORDER BY ct.language_code\n      \\`, [mapping.newKey]);\n      \n      console.log(\\`\\n=== ${mapping.oldKey} -> ${mapping.newKey} ===\\`);\n      if (result.rows.length === 0) {\n        console.log(''MISSING in database'');\n      } else {\n        result.rows.forEach(row => {\n          console.log(\\`${row.language_code}: ${row.content_value}\\`);\n        });\n      }\n    }\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\ngetMortgageStep4Translations();\n\")",
      "Bash(CONTENT_DATABASE_URL=postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway node -e \"\nconst { Pool } = require(''pg'');\nconst pool = new Pool({ connectionString: process.env.CONTENT_DATABASE_URL });\n\nasync function findProgramKeys() {\n  try {\n    const programKeys = [\n      ''prime_description'',\n      ''up_to_33_percent'',\n      ''4_to_30_years'', \n      ''prime_rate_structure'',\n      ''fixed_inflation_description'',\n      ''up_to_70_percent'',\n      ''5_to_30_years'',\n      ''fixed_rate_structure'', \n      ''variable_inflation_description'',\n      ''up_to_75_percent'',\n      ''4_to_25_years'',\n      ''variable_rate_structure''\n    ];\n    \n    // Look for program related content in the database\n    console.log(''=== Looking for program related content ==='');\n    const programResult = await pool.query(\"\"SELECT content_key, category, screen_location FROM content_items WHERE content_key LIKE ''%program%'' OR content_key LIKE ''%prime%'' OR content_key LIKE ''%rate%'' OR content_key LIKE ''%percent%''\"\");\n    programResult.rows.forEach(row => console.log(''KEY:'', row.content_key, ''CATEGORY:'', row.category, ''SCREEN:'', row.screen_location));\n    \n    // Look for existing mortgage program keys\n    console.log(''\\n=== Looking for mortgage program translations ==='');\n    const mortgageResult = await pool.query(\"\"SELECT content_key, category FROM content_items WHERE content_key LIKE ''%mortgage%'' AND (content_key LIKE ''%percent%'' OR content_key LIKE ''%program%'')\"\");\n    mortgageResult.rows.forEach(row => console.log(''KEY:'', row.content_key, ''CATEGORY:'', row.category));\n    \n    // Look for credit program keys\n    console.log(''\\n=== Looking for credit program translations ==='');\n    const creditResult = await pool.query(\"\"SELECT content_key, category FROM content_items WHERE content_key LIKE ''%credit%'' AND (content_key LIKE ''%percent%'' OR content_key LIKE ''%program%'')\"\");\n    creditResult.rows.forEach(row => console.log(''KEY:'', row.content_key, ''CATEGORY:'', row.category));\n    \n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\nfindProgramKeys();\n\")",
      "mcp__playwright__browser_network_requests",
      "Bash(sed:*)",
      "Bash(jq:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "Figma",
    "Atlassian",
    "YouTrack",
    "playwright"
  ]
}