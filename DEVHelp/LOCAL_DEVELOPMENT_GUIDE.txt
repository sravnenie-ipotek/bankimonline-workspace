===============================================================================
                    BANKIM STANDALONE PROJECT - LOCAL DEVELOPMENT GUIDE
===============================================================================

üìÅ PROJECT STRUCTURE:
standAlone_bankim/
‚îú‚îÄ‚îÄ mainapp/          # Main banking application (mortgage calculator, refinance)
‚îú‚îÄ‚îÄ account/          # Personal account dashboard
‚îú‚îÄ‚îÄ backend/          # Node.js API server (if running locally)
‚îî‚îÄ‚îÄ DEVHelp/          # This documentation folder

===============================================================================
                                üöÄ QUICK START
===============================================================================

1. INSTALL DEPENDENCIES (First time only):
   cd standAlone_bankim
   npm install
   cd mainapp; npm install
   cd ../account; npm install

2. START DEVELOPMENT SERVERS:
   
   Option A - Run All Services:
   - Terminal 1: cd mainapp; npm run dev
   - Terminal 2: cd account; npm run dev
   - Terminal 3: cd backend; npm run dev (if running backend locally)
   
   Option B - Run Individual Apps:
   - Main App Only: cd mainapp; npm run dev
   - Account App Only: cd account; npm run dev

===============================================================================
                            üìã DETAILED INSTRUCTIONS
===============================================================================

üîß PREREQUISITES:
- Node.js (v16 or higher)
- npm or yarn package manager
- Git
- PowerShell (Windows) or Terminal (Mac/Linux)

üì¶ STEP 1: CLONE & SETUP
1. Clone the repository:
   git clone [repository-url]
   cd standAlone_bankim

2. Install root dependencies:
   npm install

3. Install main app dependencies:
   cd mainapp
   npm install
   cd ..

4. Install account app dependencies:
   cd account
   npm install
   cd ..

üöÄ STEP 2: LAUNCH DEVELOPMENT SERVERS

MAIN APPLICATION (Mortgage Calculator & Refinance):
1. Open Terminal/PowerShell
2. Navigate: cd mainapp
3. Start: npm run dev
4. Access: http://localhost:5173 (or next available port)

ACCOUNT APPLICATION (Personal Dashboard):
1. Open NEW Terminal/PowerShell
2. Navigate: cd account
3. Start: npm run dev
4. Access: http://localhost:3001/account/

BACKEND API (If running locally):
1. Open NEW Terminal/PowerShell
2. Navigate: cd backend (or your backend folder)
3. Start: npm run dev
4. API: http://localhost:8003/api/

===============================================================================
                            üåê ENVIRONMENT CONFIGURATION
===============================================================================

MAIN APP ENVIRONMENT (.env files):
- Development: Uses .env file (localhost APIs)
- Production: Uses .env.production file (production APIs)

ACCOUNT APP ENVIRONMENT:
- Development: Uses .env file (localhost APIs)
- Production: Uses .env.production file (production APIs)

ENVIRONMENT VARIABLES:
- VITE_API_BASE_URL: Laravel API endpoint
- VITE_NODE_API_BASE_URL: Node.js API endpoint
- VITE_ACCOUNT_URL: Account app URL
- VITE_ENVIRONMENT: Current environment (development/production)

===============================================================================
                            üîß TROUBLESHOOTING
===============================================================================

‚ùå POWERSHELL SYNTAX ERRORS:
Problem: "The token '&&' is not a valid statement separator"
Solution: Use semicolon (;) instead of &&
- Wrong: cd mainapp && npm run dev
- Correct: cd mainapp; npm run dev

‚ùå PORT CONFLICTS:
Problem: "Port 5173 is in use"
Solution: Vite automatically finds next available port
- Check console output for actual port number
- Or manually specify: npm run dev -- --port 5174

‚ùå POSTCSS ERRORS (Account App):
Problem: "Cannot find name 'module'"
Solution: Use postcss.config.js instead of postcss.config.ts
- File should be: postcss.config.js (not .ts)

‚ùå TRANSLATION KEYS SHOWING:
Problem: Seeing "home.title" instead of actual text
Solution: Wait for i18n to load or check translation files in public/locale/

‚ùå API CONNECTION ERRORS:
Problem: Failed to fetch from localhost:8003
Solution: 
1. Check if backend is running
2. Verify environment variables
3. Check CORS settings

===============================================================================
                            üì± DEVELOPMENT URLS
===============================================================================

LOCAL DEVELOPMENT:
- Main App: http://localhost:5173/
- Account App: http://localhost:3001/account/
- Backend API: http://localhost:8003/api/

PRODUCTION URLS:
- Main App: https://bankimstandaloneprod.vercel.app/
- Account App: https://bank-dev2-standalone-txwi.vercel.app/
- Laravel API: https://bankimonlineapi-production.up.railway.app/api/v1/
- Node.js API: https://bankim-nodejs-api-production.up.railway.app/api/

===============================================================================
                            üõ†Ô∏è USEFUL COMMANDS
===============================================================================

DEVELOPMENT:
npm run dev          # Start development server
npm run build        # Build for production
npm run preview      # Preview production build

GIT COMMANDS:
git status           # Check file changes
git add .            # Stage all changes
git commit -m "msg"  # Commit changes
git push             # Push to repository

PACKAGE MANAGEMENT:
npm install          # Install dependencies
npm install [pkg]    # Install specific package
npm update           # Update packages

===============================================================================
                            üìù DEVELOPMENT WORKFLOW
===============================================================================

1. DAILY DEVELOPMENT:
   - Pull latest changes: git pull
   - Start dev servers: npm run dev (in each app folder)
   - Make changes and test locally
   - Commit and push changes

2. TESTING FEATURES:
   - Test main app features at localhost:5173
   - Test account features at localhost:3001/account
   - Test API endpoints with browser dev tools

3. BEFORE DEPLOYMENT:
   - Run build: npm run build
   - Test production build: npm run preview
   - Commit all changes
   - Push to trigger auto-deployment

===============================================================================
                            üéØ COMMON DEVELOPMENT TASKS
===============================================================================

ADDING NEW FEATURES:
1. Create feature branch: git checkout -b feature-name
2. Develop and test locally
3. Commit changes: git commit -m "Add feature description"
4. Push and create pull request

DEBUGGING API ISSUES:
1. Open browser Developer Tools (F12)
2. Check Network tab for failed requests
3. Verify API URLs in console
4. Check environment variables

UPDATING TRANSLATIONS:
1. Edit files in public/locale/ru/translation.json
2. Add new translation keys
3. Use keys in components with t('key.name')

===============================================================================
                            üìû SUPPORT & RESOURCES
===============================================================================

DOCUMENTATION:
- Vite: https://vitejs.dev/
- React: https://reactjs.org/
- i18next: https://www.i18next.com/

COMMON ISSUES:
- Check this file for troubleshooting steps
- Review browser console for errors
- Verify all services are running

DEPLOYMENT:
- Vercel automatically deploys on git push
- Check deployment status in Vercel dashboard
- Environment variables configured in Vercel settings

===============================================================================
                            ‚úÖ DEVELOPMENT CHECKLIST
===============================================================================

BEFORE STARTING DEVELOPMENT:
‚ñ° Node.js installed
‚ñ° Repository cloned
‚ñ° Dependencies installed (npm install in all folders)
‚ñ° Environment files configured

DAILY DEVELOPMENT:
‚ñ° Pull latest changes (git pull)
‚ñ° Start development servers
‚ñ° Test changes locally
‚ñ° Check browser console for errors

BEFORE COMMITTING:
‚ñ° Test all functionality
‚ñ° Check for console errors
‚ñ° Run build command successfully
‚ñ° Commit with descriptive message

===============================================================================

Last Updated: December 2024
Project: Bankim Standalone Banking Application
Environment: Development Setup Guide 