===============================================================================
                    BANKIM STANDALONE PROJECT - SYSTEM ANALYSIS & ARCHITECTURE
===============================================================================

                            🏗️ COMPLETE SYSTEM ARCHITECTURE

┌─────────────────────────────────────────────────────────────────────────────┐
│                              PRODUCTION ENVIRONMENT                         │
└─────────────────────────────────────────────────────────────────────────────┘

        ┌─────────────────┐         ┌─────────────────┐         ┌─────────────────┐
        │     GITHUB      │         │     RAILWAY     │         │   POSTGRESQL    │
        │   (Source)      │────────▶│ (Full Stack)    │────────▶│   (Database)    │
        └─────────────────┘         └─────────────────┘         └─────────────────┘
                │                           │                           │
        ┌───────▼─────────┐         ┌───────▼─────────┐         ┌───────▼─────────┐
        │  Repository     │         │  Single Service │         │  Managed DB     │
        │ MichaelMishaev/ │         │ bankim-         │         │ Railway         │
        │ bankDev2_       │         │ standalone      │         │ PostgreSQL      │
        │ standalone      │         │                 │         │                 │
        └─────────────────┘         └─────────────────┘         └─────────────────┘
                │                           │
        ┌───────▼─────────┐         ┌───────▼─────────┐
        │  Auto Deploy    │         │  Unified Server │
        │ Webhook on      │         │ server-db.js    │
        │ Push to Main    │         │ Express + React │
        └─────────────────┘         └─────────────────┘

===============================================================================
                               🌐 DEPLOYMENT MATRIX
===============================================================================

┌─────────────────┬─────────────────────┬─────────────────────┬─────────────────┐
│ COMPONENT       │ PLATFORM            │ URL                 │ STATUS          │
├─────────────────┼─────────────────────┼─────────────────────┼─────────────────┤
│ Full Stack App  │ Railway             │ bankim-standalone-  │ ✅ DEPLOYED     │
│ (Frontend+API)  │                     │ production.up.      │                 │
│                 │                     │ railway.app         │                 │
├─────────────────┼─────────────────────┼─────────────────────┼─────────────────┤
│ React Frontend  │ Railway (Static)    │ / (root path)       │ ✅ SERVED       │
│                 │                     │ Served by Express   │                 │
├─────────────────┼─────────────────────┼─────────────────────┼─────────────────┤
│ API Endpoints   │ Railway (Express)   │ /api/*              │ ✅ RUNNING      │
│                 │                     │ Same domain         │                 │
├─────────────────┼─────────────────────┼─────────────────────┼─────────────────┤
│ Legacy Admin    │ Railway (Static)    │ /admin.html         │ ✅ SERVED       │
│                 │                     │ Served by Express   │                 │
├─────────────────┼─────────────────────┼─────────────────────┼─────────────────┤
│ Legacy Customer │ Railway (Static)    │ /customer-approval- │ ✅ SERVED       │
│                 │                     │ check.html          │                 │
├─────────────────┼─────────────────────┼─────────────────────┼─────────────────┤
│ Database        │ Railway             │ Internal Railway    │ ✅ RUNNING      │
│ (PostgreSQL)    │                     │ Network             │                 │
└─────────────────┴─────────────────────┴─────────────────────┴─────────────────┘

===============================================================================
                           🔐 CREDENTIALS & ACCESS INFORMATION
===============================================================================

🚂 RAILWAY ACCOUNT:
─────────────────────
Platform: https://railway.app
Project: bankim-standalone
Service: bankim-standalone-production

DEPLOYMENT CONFIGURATION:
├── Repository: MichaelMishaev/bankDev2_standalone
├── Branch: main (auto-deploy)
├── Build System: Nixpacks
├── Start Command: node server-db.js
├── Build Command: Automated via nixpacks.toml
└── Environment: Production

RAILWAY SERVICE DETAILS:
├── Service Name: bankim-standalone
├── Domain: bankim-standalone-production.up.railway.app
├── Runtime: Node.js 20.x
├── Database: Shared PostgreSQL instance
└── Auto-scaling: Enabled

📂 GITHUB REPOSITORY:
────────────────────────
Repository: MichaelMishaev/bankDev2_standalone
Branch Strategy:
├── main (Production branch - auto-deploy to Railway)
├── Contains: Full-stack application
├── Structure:
│   ├── server-db.js (Main server file)
│   ├── mainapp/ (React application)
│   ├── railway.json (Railway configuration)
│   ├── nixpacks.toml (Build configuration)
│   ├── package.json (Server dependencies)
│   └── Legacy HTML files (admin.html, customer-approval-check.html)

===============================================================================
                           ⚙️ ENVIRONMENT VARIABLES MATRIX
===============================================================================

🚂 RAILWAY SERVICE ENVIRONMENT:
──────────────────────────────────
DATABASE_URL              = postgresql://[auto-configured by Railway]
NODE_ENV                  = production
PORT                      = [Auto-assigned by Railway]
JWT_SECRET                = [Set in Railway dashboard]
CORS_ALLOWED_ORIGINS      = * (allows all origins)

🔧 BUILD ENVIRONMENT:
────────────────────────
NODE_VERSION              = 20.x (via nixpacks.toml)
NPM_VERSION               = Bundled with Node.js 20
BUILD_COMMAND             = Automated via nixpacks phases
INSTALL_COMMAND           = npm install (root + mainapp)

===============================================================================
                             📊 DATA FLOW ARCHITECTURE
===============================================================================

UNIFIED ARCHITECTURE FLOW:
─────────────────────────────

   ┌──────────────┐    HTTPS Request     ┌─────────────────┐
   │     USER     │───────────────────►  │   RAILWAY       │
   │   (Browser)  │                      │   SERVICE       │
   └──────────────┘                      └─────────────────┘
          │                                       │
          │                                       ▼
          │                               ┌─────────────────┐
          │                               │  server-db.js   │
          │                               │  (Express.js)   │
          │                               └─────────────────┘
          │                                       │
          │                              ┌────────┴────────┐
          │                              │                 │
          ▼                              ▼                 ▼
   ┌─────────────────┐            ┌─────────────────┐ ┌─────────────────┐
   │  REACT APP      │            │   API ROUTES    │ │  STATIC FILES   │
   │  (mainapp/build)│            │   /api/*        │ │  (HTML/CSS/JS)  │
   │  Served as      │            │                 │ │                 │
   │  Static Files   │            │  - Auth         │ │  - admin.html   │
   │                 │            │  - Banking      │ │  - customer-    │
   │  Route: /       │            │  - Admin        │ │    approval-    │
   │                 │            │  - Health       │ │    check.html   │
   └─────────────────┘            └─────────────────┘ └─────────────────┘
          │                              │
          │                              ▼
          │                       ┌─────────────────┐
          │                       │   PostgreSQL    │
          │                       │   DATABASE      │
          │                       │   (Railway)     │
          │                       └─────────────────┘
          │                              ▲
          │ Same Origin Requests         │ Database
          └──────────────────────────────┘ Operations

BENEFITS OF UNIFIED ARCHITECTURE:
├── ✅ No CORS issues (same origin)
├── ✅ Single deployment to manage
├── ✅ Cost effective (one service)
├── ✅ Simplified authentication
├── ✅ Better performance
└── ✅ Easier debugging

===============================================================================
                           🔧 BUILD & DEPLOYMENT PROCESS
===============================================================================

RAILWAY DEPLOYMENT WORKFLOW:
────────────────────────────────

1. DEVELOPER COMMITS & PUSHES:
   ├── git add .
   ├── git commit -m "message"
   └── git push origin main

2. GITHUB WEBHOOK:
   └── Triggers Railway deployment automatically

3. RAILWAY BUILD PROCESS (Nixpacks):
   ├── Phase 1 - Setup: Install Node.js 20
   ├── Phase 2 - Install: npm install (server dependencies)
   ├── Phase 3 - Build: 
   │   ├── cd mainapp
   │   ├── npm install (React dependencies)
   │   ├── npm run build (creates mainapp/build/)
   │   └── cd ..
   └── Phase 4 - Start: node server-db.js

4. SERVICE DEPLOYMENT:
   ├── Express server starts on Railway-assigned port
   ├── Serves React build from mainapp/build/
   ├── Provides API endpoints at /api/*
   ├── Serves legacy HTML files
   ├── Connects to PostgreSQL database
   └── Application goes live

NIXPACKS CONFIGURATION (nixpacks.toml):
──────────────────────────────────────────
```toml
[phases.setup]
nixPkgs = ['nodejs_20']

[phases.install]
cmds = ['npm install']

[phases.build]
cmds = ['cd mainapp && npm install && npm run build && cd ..']

[start]
cmd = 'node server-db.js'
```

RAILWAY CONFIGURATION (railway.json):
────────────────────────────────────────
```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "node server-db.js"
  }
}
```

===============================================================================
                           🚨 MONITORING & HEALTH CHECKS
===============================================================================

SERVICE STATUS MONITORING:
─────────────────────────────

✅ RAILWAY SERVICE:
├── Dashboard: https://railway.app → Project → bankim-standalone
├── Logs: Real-time application logs in Railway dashboard
├── Metrics: CPU, Memory, Network usage
├── Deployments: Build history and status
└── Database: PostgreSQL connection and performance

✅ APPLICATION HEALTH:
├── Health Endpoint: GET /api/health
├── Database Check: Included in health endpoint
├── Server Status: Express server uptime
└── Build Status: React app build verification

HEALTH CHECK ENDPOINTS:
─────────────────────────
├── GET /api/health → Server and database status
├── GET / → React app (SPA routing)
├── GET /admin.html → Legacy admin interface
├── GET /customer-approval-check.html → Legacy customer interface
└── GET /api/admin/stats → Admin dashboard (requires auth)

ALERT MECHANISMS:
─────────────────────
├── Railway: Dashboard alerts on service issues
├── Application: Error boundaries in React
├── Server: Express error handling middleware
└── Database: Connection error logging

===============================================================================
                           🔄 BACKUP & DISASTER RECOVERY
===============================================================================

DATABASE BACKUP (Railway):
─────────────────────────────
├── Automatic daily backups
├── Point-in-time recovery available
├── Backup retention: Based on Railway plan
├── Manual backup: Via Railway dashboard
└── Database export: SQL dump available

CODE BACKUP (GitHub):
─────────────────────────
├── Git version control
├── Complete project history
├── Branch protection on main
├── Local development copies
└── Railway deployment snapshots

DEPLOYMENT ROLLBACK:
───────────────────────
├── Railway: Previous deployments accessible
├── Git: Revert commits and redeploy
├── Database: Restore from backup if needed
└── Environment: Quick rollback via Railway dashboard

DISASTER RECOVERY PLAN:
──────────────────────────
1. Service Down: Check Railway status and logs
2. Database Issues: Verify connection and restore if needed
3. Code Issues: Git revert and redeploy
4. Complete Failure: Restore from backups and redeploy
5. DNS Issues: Railway handles domain management

===============================================================================
                           📈 PERFORMANCE OPTIMIZATION
===============================================================================

RAILWAY PLATFORM OPTIMIZATIONS:
──────────────────────────────────
├── Auto-scaling: Based on traffic demand
├── Global CDN: Railway edge network
├── Container optimization: Efficient resource usage
├── Database connection pooling: PostgreSQL optimization
└── Build caching: Faster subsequent deployments

APPLICATION OPTIMIZATIONS:
─────────────────────────────
├── React Build: Production-optimized bundle (Vite)
├── Static Assets: Served directly by Express
├── API Responses: Minimal JSON payloads
├── Database Queries: Indexed and optimized
├── Compression: Gzip enabled for responses
└── Caching: Express static file caching

DEVELOPMENT OPTIMIZATIONS:
─────────────────────────────
├── Hot Module Replacement: Vite development server
├── Build Speed: Separated server and client dependencies
├── Development Mode: Local server with live reload
├── Error Handling: Comprehensive error boundaries
└── Debugging: Source maps enabled in development

===============================================================================
                           📋 MAINTENANCE CHECKLIST
===============================================================================

DAILY CHECKS:
─────────────────
□ Monitor Railway service status
□ Check application health endpoint
□ Verify critical user flows work
□ Review error logs in Railway dashboard
□ Monitor database performance metrics

WEEKLY MAINTENANCE:
──────────────────────
□ Review deployment logs
□ Update dependencies (security patches)
□ Monitor usage metrics and costs
□ Backup verification
□ Performance metrics review

MONTHLY REVIEWS:
───────────────────
□ Security audit and updates
□ Performance optimization review
□ Cost optimization analysis
□ Infrastructure scaling assessment
□ Documentation updates

===============================================================================
                           🎯 TROUBLESHOOTING GUIDE
===============================================================================

DEPLOYMENT ISSUES:
─────────────────────
❌ Railway Build Failures:
├── Check nixpacks.toml configuration
├── Verify Node.js version compatibility
├── Review build logs in Railway dashboard
├── Test build locally with ./build-railway.sh
└── Check for dependency conflicts

❌ Service Startup Issues:
├── Check Railway service logs
├── Verify environment variables
├── Test server locally: node server-db.js
├── Check database connection
└── Verify port configuration

APPLICATION ISSUES:
──────────────────────
❌ React App Not Loading:
├── Check if mainapp/build/ exists
├── Verify build process completed
├── Test React build locally
├── Check Express static file serving
└── Verify React Router configuration

❌ API Endpoints Failing:
├── Check Railway application logs
├── Verify database connection
├── Test endpoints with curl/Postman
├── Check CORS configuration
└── Verify JWT authentication

❌ Database Connection Issues:
├── Check DATABASE_URL environment variable
├── Verify Railway database service status
├── Test connection in Railway dashboard
├── Check for connection pool limits
└── Review database logs

LOCAL DEVELOPMENT ISSUES:
────────────────────────────
❌ Missing Dependencies:
├── Run npm install in root directory
├── Run npm install in mainapp/ directory
├── Check package.json files
└── Clear node_modules and reinstall

❌ Port Conflicts:
├── EADDRINUSE Port 3001: Kill process or change port
├── EADDRINUSE Port 8003: Kill process or change port
├── Use netstat to find conflicting processes
└── Check both serve.js and server-db.js ports

❌ Build Errors:
├── Check React app dependencies
├── Verify Vite configuration
├── Test build: cd mainapp && npm run build
└── Check for TypeScript errors

===============================================================================
                           📊 COST OPTIMIZATION
===============================================================================

CURRENT USAGE (Railway):
───────────────────────────────
├── Service: bankim-standalone (within free/hobby limits)
├── Database: PostgreSQL (shared, within limits)
├── Build Minutes: Tracked per deployment
├── Bandwidth: Monitored usage
└── Total Monthly Cost: Based on Railway plan

SCALING CONSIDERATIONS:
──────────────────────────
├── Railway Pro: $20/month (more resources, custom domains)
├── Database Upgrade: More storage and connections
├── Multiple Environments: Staging + Production
├── Custom Domain: Professional branding
└── Enhanced Monitoring: Advanced metrics and alerts

COST OPTIMIZATION STRATEGIES:
────────────────────────────────
├── Efficient builds: Minimize build time and frequency
├── Resource monitoring: Track CPU and memory usage
├── Database optimization: Efficient queries and indexing
├── Caching strategies: Reduce API calls and database hits
└── Traffic optimization: CDN usage and compression

===============================================================================
                           🔗 IMPORTANT URLS & ENDPOINTS
===============================================================================

PRODUCTION URLS:
───────────────────
├── Main Application: https://bankim-standalone-production.up.railway.app/
├── API Health Check: https://bankim-standalone-production.up.railway.app/api/health
├── Admin Interface: https://bankim-standalone-production.up.railway.app/admin.html
├── Customer Interface: https://bankim-standalone-production.up.railway.app/customer-approval-check.html
└── Railway Dashboard: https://railway.app/project/[project-id]

DEVELOPMENT URLS:
────────────────────
├── Local Server: http://localhost:8003
├── Local Health: http://localhost:8003/api/health
├── React Development: http://localhost:3000 (if using npm start in mainapp/)
└── Admin Local: http://localhost:8003/admin.html

API ENDPOINTS:
─────────────────
├── GET /api/health → Server and database status
├── POST /api/login → Email authentication
├── POST /api/sms-login → SMS authentication request
├── POST /api/sms-code-login → SMS code verification
├── POST /api/customer/compare-banks → Bank comparison
├── POST /api/customer/submit-application → Application submission
├── GET /api/admin/stats → Admin statistics (requires auth)
├── GET /api/admin/banks → Bank management (requires auth)
└── GET /api/admin/applications → Application management (requires auth)

===============================================================================
                           📝 DEVELOPMENT WORKFLOW
===============================================================================

GETTING STARTED:
───────────────────
1. Clone repository: git clone [repo-url]
2. Install server dependencies: npm install
3. Install React dependencies: cd mainapp && npm install
4. Set up environment variables (copy from Railway)
5. Start development: npm run dev (or node start-dev.js)
6. Test locally: Open http://localhost:8003

DEVELOPMENT COMMANDS:
────────────────────────
├── npm run dev → Start development servers
├── npm start → Start production server
├── node server-db.js → Start server only
├── cd mainapp && npm start → Start React development server
├── cd mainapp && npm run build → Build React app
└── ./build-railway.sh → Test Railway build locally

DEPLOYMENT WORKFLOW:
───────────────────────
1. Make changes and test locally
2. Commit changes: git add . && git commit -m "message"
3. Push to main: git push origin main
4. Railway auto-deploys via webhook
5. Monitor deployment in Railway dashboard
6. Verify deployment at production URL

===============================================================================
                        🧮 MORTGAGE CALCULATION SYSTEM ARCHITECTURE
===============================================================================

CALCULATION SYSTEM OVERVIEW:
────────────────────────────────

The Bankim system implements a sophisticated mortgage calculation engine that provides:
├── Bank-specific calculation parameters and standards
├── Property ownership-based financing logic (Confluence Action #12)
├── Real-time interest rate adjustments based on customer profile
├── Dynamic LTV (Loan-to-Value) calculations
├── Credit score-based rate modifications
├── Form session management across multi-step process
├── Database-driven configuration (zero hardcoded values)
└── Compliance with Israeli banking standards

CALCULATION FLOW ARCHITECTURE:
─────────────────────────────────

   ┌──────────────────┐    Form Submit    ┌─────────────────────┐
   │   REACT FORM     │─────────────────► │  /api/customer/     │
   │  (Steps 1-3)     │                   │  compare-banks      │
   └──────────────────┘                   └─────────────────────┘
          │                                        │
   ┌──────▼──────────┐                    ┌───────▼─────────────┐
   │ Property        │                    │  CALCULATION        │
   │ Ownership       │                    │  ENGINE             │
   │ Selection       │                    │  (server-db.js)     │
   │ 75%/50%/70%     │                    └─────────────────────┘
   └─────────────────┘                             │
          │                                ┌───────▼─────────────┐
   ┌──────▼──────────┐                    │  BANK-SPECIFIC      │
   │ Real-time       │                    │  CALCULATIONS       │
   │ LTV Slider      │                    │  - 18 Active Banks  │
   │ Updates         │                    │  - Individual Rates │
   └─────────────────┘                    │  - Custom Standards │
                                          └─────────────────────┘
                                                   │
                                          ┌───────▼─────────────┐
                                          │  DATABASE QUERIES   │
                                          │  - Client Profile   │
                                          │  - Bank Standards   │
                                          │  - Rate Adjustments │
                                          └─────────────────────┘
                                                   │
                                          ┌───────▼─────────────┐
                                          │  PERSONALIZED       │
                                          │  BANK OFFERS        │
                                          │  JSON Response      │
                                          └─────────────────────┘

===============================================================================
                           🏦 BANK-SPECIFIC CALCULATION SYSTEM
===============================================================================

CONFIGURED BANKS MATRIX:
───────────────────────────────────────────────────────────────────────────────
┌─────┬──────────────────────────────┬─────────────┬─────────┬─────────┬───────┐
│ ID  │ BANK NAME                    │ BASE RATE   │ LTV MAX │ CREDIT  │ DTI   │
│     │                              │             │         │ MIN     │ MAX   │
├─────┼──────────────────────────────┼─────────────┼─────────┼─────────┼───────┤
│ 75  │ State Bank of Israel         │ 3.18%       │ 80%     │ 680     │ 40%   │
│ 76  │ Bank Hapoalim                │ 3.25%       │ 82%     │ 650     │ 42%   │
│ 77  │ Bank Leumi                   │ 3.30%       │ 75%     │ 620     │ 38%   │
│ 78  │ Discount Bank                │ 3.22%       │ 78%     │ 640     │ 41%   │
│ 79  │ Mizrahi Tefahot Bank         │ 3.35%       │ 76%     │ 660     │ 39%   │
│ 80  │ First International Bank     │ 3.40%       │ 72%     │ 670     │ 37%   │
│ 81  │ Union Bank of Israel         │ 3.28%       │ 79%     │ 630     │ 43%   │
│ 82  │ Bank Yaav for civil servants │ 3.20%       │ 81%     │ 625     │ 44%   │
│ 83  │ Mercantil Discount Bank      │ 3.45%       │ 70%     │ 680     │ 35%   │
│ 84  │ Bank Yerushalayim            │ 3.50%       │ 74%     │ 655     │ 40%   │
└─────┴──────────────────────────────┴─────────────┴─────────┴─────────┴───────┘

CALCULATION PARAMETERS PER BANK:
──────────────────────────────────────
Each bank maintains individual configuration for:
├── Base Interest Rate: 3.18% - 3.50% range
├── Maximum LTV Ratio: 70% - 82% range  
├── Minimum Credit Score: 620 - 680 range
├── Maximum DTI Ratio: 35% - 44% range
├── Rate Adjustments: Credit score-based modifications
├── Property Type Preferences: Residential/Commercial rates
├── Employment Type Factors: Salaried vs. Self-employed
└── Age-based Loan Term Limits: 18-75 years

RATE ADJUSTMENT LOGIC:
─────────────────────────
├── Credit Score Excellent (750+): -0.3% rate reduction
├── Credit Score Good (650-749): -0.1% rate reduction  
├── Credit Score Fair (580-649): No adjustment
├── Credit Score Poor (<580): +0.5% rate increase
├── Property Type: Residential vs Commercial rates
├── Employment Type: Stable employment bonus
└── LTV Ratio: Higher LTV = higher risk premium

===============================================================================
                        📊 PROPERTY OWNERSHIP LOGIC (CONFLUENCE ACTION #12)
===============================================================================

PROPERTY OWNERSHIP OPTIONS & FINANCING:
──────────────────────────────────────────

The system implements Confluence-specified property ownership logic that directly
affects maximum financing percentages and LTV calculations:

┌─────────────────────────────────────────────────────────────────────────────┐
│                         PROPERTY OWNERSHIP MATRIX                           │
├─────────────────────────────────────────────────────────────────────────────┤
│ OPTION 1: "Нет, я пока не владею недвижимостью"                           │
│ ├── Translation: "No, I don't own real estate yet"                          │
│ ├── Maximum Financing: 75%                                                  │
│ ├── LTV Impact: Standard first-time buyer rates                             │
│ └── Risk Assessment: Lower risk (no existing obligations)                   │
├─────────────────────────────────────────────────────────────────────────────┤
│ OPTION 2: "Да, у меня уже есть недвижимость"                              │
│ ├── Translation: "Yes, I already own real estate"                           │
│ ├── Maximum Financing: 50%                                                  │
│ ├── LTV Impact: Reduced financing (investment property)                     │
│ └── Risk Assessment: Higher risk (multiple properties)                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ OPTION 3: "Я собираюсь продать единственную недвижимость..."              │
│ ├── Translation: "I'm planning to sell my only real estate..."              │
│ ├── Maximum Financing: 70%                                                  │
│ ├── LTV Impact: Intermediate financing (transitional)                       │
│ └── Risk Assessment: Medium risk (property transition)                      │
└─────────────────────────────────────────────────────────────────────────────┘

REAL-TIME FRONTEND INTEGRATION:
──────────────────────────────────
├── Dynamic Slider Updates: LTV slider max adjusts based on selection
├── Immediate Recalculation: Form values update on ownership change
├── Visual Feedback: Progress indicators and validation messages
├── Translation Support: Full EN/RU/HE language support
├── Error Handling: Validation prevents invalid combinations
└── Session Persistence: Property choice saved across form steps

CALCULATION IMPACT FLOW:
───────────────────────────
1. User selects property ownership option in FirstStepForm.tsx
2. Frontend validates and updates maxLTV state (75%/50%/70%)
3. LTV slider maximum automatically adjusts to new limit
4. User continues with adjusted financing parameters
5. Form submission includes property_ownership_id
6. Backend applies ownership-specific calculation rules
7. Bank eligibility checks use adjusted LTV limits
8. Final offers reflect property ownership constraints

===============================================================================
                           🗄️ DATABASE ARCHITECTURE FOR CALCULATIONS
===============================================================================

CALCULATION-RELATED TABLES:
──────────────────────────────

📋 BANKING STANDARDS & CONFIGURATION:
├── banking_standards (Global defaults)
├── bank_configurations (Bank-specific overrides)  
├── bank_standards_overrides (Individual bank rules)
├── banks (Bank master data with 18 active banks)
└── interest_rates (Historical and current rates)

👤 CLIENT PROFILE DATA:
├── clients (Customer master records)
├── client_credit_history (Credit scores and history)
├── client_employment (Employment details and income)
├── client_debts (Existing financial obligations)
├── client_contact_info (Contact and verification data)
└── client_form_sessions (Multi-step form state management)

🏠 PROPERTY & LOAN DATA:
├── properties (Property details and valuations)
├── property_ownership_options (3 ownership types: 75%/50%/70%)
├── loan_applications (Application submissions)
├── mortgage_calculation_cache (Performance optimization)
└── loan_terms (Term structures and payment schedules)

CALCULATED DATABASE FUNCTIONS:
─────────────────────────────────
```sql
-- Core calculation functions implemented in PostgreSQL
├── get_current_mortgage_rate(bank_id, credit_score, property_type)
├── calculate_annuity_payment(principal, rate, term_months)
├── get_property_ownership_ltv(ownership_option_id)
├── get_client_credit_score(client_id)
├── calculate_dti_ratio(client_id, monthly_payment)
├── get_bank_specific_standards(bank_id)
└── apply_rate_adjustments(base_rate, credit_score, employment_type)
```

DATABASE-DRIVEN APPROACH BENEFITS:
─────────────────────────────────────
├── ✅ Zero Hardcoded Values: All parameters in database
├── ✅ Real-time Updates: Configuration changes without deployment
├── ✅ Audit Trail: Complete calculation history and changes
├── ✅ A/B Testing: Easy parameter experimentation
├── ✅ Compliance: Regulatory requirement tracking
├── ✅ Performance: Optimized queries with proper indexing
└── ✅ Scalability: Easy addition of new banks and products

===============================================================================
                          🔄 FORM SESSION MANAGEMENT & REAL-TIME UPDATES
===============================================================================

MULTI-STEP FORM ARCHITECTURE:
────────────────────────────────

STEP 1 - BASIC INFORMATION:
├── Property ownership selection (75%/50%/70% financing)
├── Property value and location
├── Desired loan amount with real-time LTV calculation
├── Property type (residential/commercial)
├── Session initialization and state persistence
└── Real-time validation and error handling

STEP 2 - FINANCIAL PROFILE:
├── Employment information and monthly income
├── Existing debts and financial obligations
├── Credit history and score calculation
├── DTI ratio real-time calculation
├── Session state updates with form progress
└── Bank pre-qualification checks

STEP 3 - PERSONAL DETAILS:
├── Personal information and demographics
├── Contact details and preferences
├── Final validation and session completion
├── Preparation for bank comparison API call
├── Form data consolidation and validation
└── Session handoff to calculation engine

REAL-TIME UPDATE MECHANISMS:
───────────────────────────────
├── Property Ownership Impact: Immediate LTV slider adjustment
├── Income Changes: Real-time DTI ratio updates
├── Loan Amount Adjustment: Instant eligibility feedback
├── Credit Score Updates: Rate impact preview
├── Bank Filter Updates: Dynamic bank list adjustment
└── Session Auto-save: Progress preservation on navigation

SESSION PERSISTENCE STRATEGY:
────────────────────────────────
```javascript
// Frontend session management
├── Redux State Management: Central form state store
├── LocalStorage Backup: Browser-based persistence
├── Database Sessions: Server-side session tracking
├── API State Sync: Real-time backend synchronization
├── Error Recovery: Automatic form restoration
└── Cross-device Support: Session restoration across devices
```

===============================================================================
                           🔌 CALCULATION API ENDPOINTS
===============================================================================

CORE CALCULATION ENDPOINTS:
──────────────────────────────

📊 BANK COMPARISON & CALCULATIONS:
├── POST /api/customer/compare-banks
│   ├── Input: Complete customer profile and property details
│   ├── Processing: 18 bank eligibility and rate calculations
│   ├── Output: Personalized bank offers with rates and terms
│   └── Performance: ~3.5s average response time
│
├── GET /api/customer/property-ownership-options  
│   ├── Input: None (static configuration)
│   ├── Processing: Retrieves 3 ownership options with LTV limits
│   ├── Output: Ownership types with financing percentages
│   └── Performance: <100ms cached response
│
└── POST /api/customer/calculate-payment
    ├── Input: Principal, rate, term parameters
    ├── Processing: Annuity payment calculation
    ├── Output: Monthly payment and amortization schedule
    └── Performance: <50ms mathematical calculation

🏦 BANK CONFIGURATION MANAGEMENT:
├── POST /api/admin/banks/:bankId/calculation-config
│   ├── Input: Bank-specific calculation parameters
│   ├── Processing: Update bank configuration in database
│   ├── Output: Confirmation and updated parameters
│   └── Authentication: Admin role required
│
├── GET /api/admin/banks/:bankId/calculation-config
│   ├── Input: Bank ID parameter
│   ├── Processing: Retrieve bank-specific configuration
│   ├── Output: Complete bank calculation parameters
│   └── Authentication: Admin role required
│
└── POST /api/test/initialize-bank-configs
    ├── Input: Configuration templates for all banks
    ├── Processing: Bulk bank configuration initialization
    ├── Output: Success confirmation and created records
    └── Environment: Development/testing only

📈 CALCULATION TESTING & MONITORING:
├── GET /api/admin/calculation-stats
│   ├── Input: Optional date range and bank filters
│   ├── Processing: Aggregated calculation performance metrics
│   ├── Output: Success rates, average rates, processing times
│   └── Authentication: Admin role required
│
└── POST /api/test/validate-calculations
    ├── Input: Test case scenarios and expected outcomes
    ├── Processing: Automated calculation validation
    ├── Output: Test results and any discrepancies
    └── Environment: Development/testing only

API RESPONSE STRUCTURE:
──────────────────────────
```json
// /api/customer/compare-banks response structure
{
  "success": true,
  "eligibleBanks": [
    {
      "bankId": 75,
      "bankName": "State Bank of Israel",
      "interestRate": 2.88,
      "monthlyPayment": 4234.56,
      "maxLoanAmount": 800000,
      "ltvRatio": 75.0,
      "processingFee": 5000,
      "eligible": true,
      "rejectionReason": null,
      "calculationDetails": {
        "baseRate": 3.18,
        "creditScoreAdjustment": -0.3,
        "propertyOwnershipLTV": 75,
        "bankSpecificLTV": 80,
        "appliedLTV": 75
      }
    }
  ],
  "calculationMetadata": {
    "customerCreditScore": 750,
    "propertyOwnership": "no_property",
    "processingTime": "3.2s",
    "banksProcessed": 18,
    "banksEligible": 12
  }
}
```

===============================================================================
                          ⚡ PERFORMANCE OPTIMIZATION & CACHING
===============================================================================

CALCULATION PERFORMANCE STRATEGIES:
─────────────────────────────────────

🔄 DATABASE OPTIMIZATION:
├── Indexed Queries: All foreign keys and frequently searched columns
├── Connection Pooling: Efficient database connection management
├── Query Optimization: Minimized N+1 queries and joins
├── Prepared Statements: SQL injection prevention and performance
├── Database Functions: Complex calculations performed in PostgreSQL
└── Result Caching: Frequently accessed configuration data cached

🏃‍♂️ ALGORITHMIC OPTIMIZATION:
├── Parallel Processing: Bank calculations processed concurrently
├── Early Termination: Skip calculations for obviously ineligible banks
├── Lazy Loading: Calculate additional details only when needed
├── Memoization: Cache expensive calculation results
├── Bulk Operations: Batch database operations where possible
└── Smart Filtering: Pre-filter banks before detailed calculations

📊 FRONTEND OPTIMIZATION:
├── Debounced Updates: Prevent excessive recalculation on input
├── Progressive Enhancement: Load basic UI first, enhance with calculations
├── Virtual Scrolling: Efficient rendering of large bank lists
├── Code Splitting: Lazy load calculation components
├── Optimistic Updates: Show immediate feedback while processing
└── Error Boundaries: Graceful degradation on calculation failures

PERFORMANCE METRICS:
───────────────────────
├── Average Response Time: ~3.5 seconds for full bank comparison
├── 95th Percentile: <5 seconds for complex scenarios
├── Database Query Time: <200ms per individual bank calculation
├── Frontend Rendering: <100ms for results display
├── Memory Usage: <50MB peak during calculation processing
└── Concurrent Users: Tested up to 100 simultaneous calculations

===============================================================================
                         🧪 TESTING & VALIDATION FRAMEWORK
===============================================================================

CALCULATION TESTING STRATEGY:
────────────────────────────────

📋 UNIT TESTING:
├── Individual calculation functions tested in isolation
├── Edge cases: Zero values, maximum limits, invalid inputs
├── Mathematical accuracy: Precision validation for financial calculations
├── Database function testing: PostgreSQL function unit tests
├── Rate adjustment logic: Credit score impact validation
└── Property ownership logic: LTV calculation verification

🔧 INTEGRATION TESTING:
├── End-to-end calculation flows: Form submission to bank offers
├── API endpoint testing: Complete request/response validation
├── Database integration: Real data scenario testing
├── Cross-bank calculation consistency: Rate comparison validation
├── Session management: Multi-step form state persistence
└── Error handling: Invalid input and system failure scenarios

🎯 AUTOMATED TESTING:
```javascript
// Cypress E2E test examples for mortgage calculator
├── Mortgage Calculator Flow: Complete user journey testing
├── Property Ownership Selection: Real-time LTV updates
├── Bank Comparison Results: Offer accuracy validation
├── Form Validation: Error message and input validation
├── Cross-browser Testing: Chrome, Firefox, Safari compatibility
└── Mobile Responsiveness: Touch interface and mobile layouts
```

VALIDATION RULES:
─────────────────────
├── Interest Rate Bounds: 1.0% - 15.0% valid range
├── LTV Ratio Limits: 0% - 100% with ownership-specific maxes
├── Credit Score Range: 300 - 850 standard scoring range
├── Income Validation: Positive values with reasonable maximums
├── Debt-to-Income Ratio: 0% - 60% practical limits
└── Age Constraints: 18-75 years as per banking standards

===============================================================================
                          🚨 ERROR HANDLING & TROUBLESHOOTING
===============================================================================

CALCULATION ERROR SCENARIOS:
───────────────────────────────

❌ COMMON CALCULATION ERRORS:
├── TypeError: bankSpecificRate.toFixed is not a function
│   ├── Cause: Rate calculation returning undefined/null
│   ├── Solution: Add null checks and default values
│   └── Prevention: Validate all calculation inputs
│
├── Division by Zero: Invalid DTI calculations
│   ├── Cause: Zero income or invalid financial data
│   ├── Solution: Input validation and error boundaries
│   └── Prevention: Frontend form validation
│
├── Database Connection Timeouts: Slow calculation responses
│   ├── Cause: High load or inefficient queries
│   ├── Solution: Connection pooling and query optimization
│   └── Prevention: Performance monitoring and alerting
│
└── Invalid Bank Configuration: Missing calculation parameters
    ├── Cause: Incomplete bank setup or data migration issues
    ├── Solution: Default fallback values and validation
    └── Prevention: Configuration validation on bank setup

🔍 DEBUGGING TOOLS:
├── Detailed Logging: Bank-by-bank calculation progress tracking
├── Calculation Metadata: Processing time and intermediate results
├── Database Query Logging: SQL execution time and result analysis
├── Frontend Redux DevTools: State management debugging
├── API Response Inspection: Complete calculation detail exposure
└── Performance Profiling: Bottleneck identification and optimization

TROUBLESHOOTING CHECKLIST:
─────────────────────────────
□ Verify database connection and bank configuration completeness
□ Check customer data completeness and validation
□ Validate property ownership selection and LTV calculations
□ Confirm credit score calculation and rate adjustments
□ Review bank eligibility criteria and standards compliance
□ Test API endpoints with sample data for expected responses
□ Monitor server logs for calculation errors and performance issues
□ Validate frontend form state and session management
□ Check translation completeness for all supported languages
□ Verify mobile responsiveness and cross-browser compatibility

===============================================================================

CREATED: December 2024
PROJECT: Bankim Standalone Banking Application
VERSION: Production v5.0 (Railway Migration)
ARCHITECTURE: Unified full-stack Railway deployment
LAST UPDATED: December 2024 - Added Comprehensive Calculation System Documentation

=============================================================================== 