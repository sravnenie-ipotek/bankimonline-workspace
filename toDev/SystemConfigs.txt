================================================================================
                    BANKIM ONLINE - SYSTEM CONFIGURATION DOCUMENTATION
================================================================================

Last Updated: December 2024
Version: 5.0.0
Status: PRODUCTION READY - RAILWAY DEPLOYMENT

================================================================================
                                SYSTEM ARCHITECTURE
================================================================================

┌─────────────────┐    ┌─────────────────────────────────────────────────────┐
│     GITHUB      │    │                   RAILWAY                           │
│   (Source Code) │───▶│           (Frontend + Backend + Database)           │
│                 │    │                                                     │
│ Repository:     │    │ Single Service Deployment:                         │
│ bankDev2_       │    │ - Node.js Server (server-db.js)                   │
│ standalone      │    │ - React Frontend (mainapp/build/)                 │
│                 │    │ - PostgreSQL Database                              │
│                 │    │ - Static File Serving                              │
└─────────────────┘    └─────────────────────────────────────────────────────┘

DEPLOYMENT STRATEGY: Single Railway service serves both frontend and backend
- Frontend: React app built and served as static files
- Backend: Express.js API server with database integration
- Database: Railway PostgreSQL with automatic connection
- No separate frontend hosting (eliminated Vercel completely)

================================================================================
                                GITHUB REPOSITORY
================================================================================

Repository Name: MichaelMishaev/bankDev2_standalone
Repository Type: Private
Branch: main
Auto-Deploy: ✅ Railway deployment on push

KEY FILES:
├── server-db.js                   # Main production server (API + static files)
├── railway.json                   # Railway deployment configuration
├── nixpacks.toml                  # Nixpacks build configuration
├── build-railway.sh               # Railway build script with error handling
├── package.json                   # Root dependencies for server
├── mainapp/                       # React application directory
│   ├── package.json              # React app dependencies
│   ├── src/                      # React source code
│   └── build/                    # Built React app (served by server-db.js)
├── customer-approval-check.html   # Legacy customer interface (static)
├── admin.html                     # Legacy admin panel (static)
├── css/tailwind.min.css          # Custom Tailwind CSS
├── js/i18n.js                    # Internationalization system
├── locales/                      # Translation files
│   ├── en.json                   # English translations
│   ├── he.json                   # Hebrew translations
│   └── ru.json                   # Russian translations
└── migrations/                   # Database schema migrations

================================================================================
                                RAILWAY DEPLOYMENT
================================================================================

Service Name: bankim-standalone
Purpose: Full-stack application (Frontend + Backend + Database)
Auto-Deploy: ✅ From GitHub pushes to main branch

DEPLOYMENT CONFIGURATION:
├── Builder: Nixpacks (nixpacks.toml)
├── Start Command: node server-db.js
├── Build Process: npm ci → cd mainapp → npm ci → npm run build
├── Port: Auto-assigned by Railway (process.env.PORT)
└── Node.js Version: 20.x

RAILWAY.JSON CONFIGURATION:
```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "node server-db.js"
  }
}
```
Purpose: Tells Railway to use Nixpacks builder and start with server-db.js

NIXPACKS.TOML CONFIGURATION:
```toml
[phases.setup]
nixPkgs = ['nodejs_20']

[phases.install]
cmds = ['npm ci']

[phases.build]
cmds = [
  'cd mainapp',
  'npm ci', 
  'npm run build',
  'cd ..'
]

[start]
cmd = 'node server-db.js'
```
Purpose: 
- nodejs_20: Provides Node.js 20 with npm (latest LTS for stability)
- install phase: Installs root dependencies for server
- build phase: Builds React app in mainapp directory
- start: Launches the unified server

DATABASE:
├── Type: PostgreSQL
├── Provider: Railway
├── Connection: Automatic via DATABASE_URL environment variable
├── Migrations: Run automatically on server startup
└── Backup: Railway automatic daily backups

SERVER-DB.JS FEATURES:
├── ✅ Express.js API server
├── ✅ Static file serving for React build
├── ✅ React Router support (catch-all routing)
├── ✅ API endpoints for banking operations
├── ✅ PostgreSQL database integration
├── ✅ CORS configuration for cross-origin requests
├── ✅ JWT authentication system
├── ✅ SMS mock system for development
└── ✅ Health check endpoint (/api/health)

API ENDPOINTS:
├── Health Check: GET /api/health
├── Authentication:
│   ├── POST /api/login (Email login)
│   ├── POST /api/sms-login (SMS request)
│   └── POST /api/sms-code-login (SMS verify)
├── Customer Services:
│   ├── POST /api/customer/compare-banks
│   ├── POST /api/customer/submit-application
│   └── GET /api/applications/:id/status
├── Admin Services:
│   ├── POST /api/admin/login
│   ├── GET /api/admin/stats
│   ├── GET /api/admin/banks
│   ├── GET /api/admin/applications
│   ├── GET /api/admin/applications/:id
│   └── PUT /api/admin/applications/:id/status
└── Static Files: /* (serves React build + legacy HTML files)

ENVIRONMENT VARIABLES:
├── DATABASE_URL: (Auto-set by Railway PostgreSQL)
├── JWT_SECRET: (Set in Railway dashboard for secure tokens)
├── PORT: (Auto-set by Railway for container)
├── NODE_ENV: production
└── CORS_ALLOWED_ORIGINS: * (allows all origins for flexibility)

================================================================================
                            DEPLOYMENT WORKFLOW
================================================================================

AUTOMATIC DEPLOYMENT PROCESS:

1. DEVELOPER PUSHES TO GITHUB
   ├── git add .
   ├── git commit -m "message"
   └── git push origin main

2. RAILWAY AUTO-DEPLOYMENT
   ├── Detects GitHub push webhook
   ├── Pulls latest code from main branch
   ├── Runs nixpacks build process:
   │   ├── Setup: Install Node.js 20
   │   ├── Install: npm ci (root dependencies)
   │   ├── Build: cd mainapp && npm ci && npm run build
   │   └── Start: node server-db.js
   ├── Connects to PostgreSQL database
   ├── Serves React app + API on single domain
   └── Application goes live instantly

DEPLOYMENT VERIFICATION:
├── Railway Dashboard: Check service status and logs
├── Health Check: GET https://your-app.railway.app/api/health
├── Frontend: Access React app at root URL
├── API: Test endpoints with proper CORS
└── Database: Verify connection in Railway metrics

BUILD SCRIPT (build-railway.sh):
Purpose: Provides manual build testing with error handling
- Tests npm install in root directory
- Tests React app build in mainapp directory
- Validates build output before deployment
- Helps debug build issues locally

================================================================================
                                SYSTEM INTEGRATIONS
================================================================================

UNIFIED ARCHITECTURE BENEFITS:
├── ✅ Single domain (no CORS issues between frontend/backend)
├── ✅ Simplified deployment (one Railway service)
├── ✅ Cost effective (no separate frontend hosting)
├── ✅ Easier SSL/security management
├── ✅ Better performance (no cross-domain requests)
└── ✅ Simplified authentication flow

FRONTEND ↔ BACKEND COMMUNICATION:
├── Same Origin: Frontend and API on same domain
├── No CORS Issues: Both served from server-db.js
├── Authentication: JWT tokens in same-origin cookies
├── API Calls: Relative URLs (/api/endpoint)
└── Error Handling: Unified error responses

MULTILINGUAL SYSTEM:
├── Language Detection: Browser preference + manual selection
├── Translation Loading: Dynamic JSON files from /locales/
├── Fallback: English as default language
├── Supported Languages: EN (English), RU (Russian), HE (Hebrew)
└── Implementation: i18n.js system with dynamic loading

BANKING FEATURES:
├── Approval Calculation: Real-time via PostgreSQL algorithms
├── Bank Comparison: Dynamic data from banks table
├── Application Submission: Secure API with validation
├── Status Tracking: Unique application IDs with updates
├── Admin Management: Role-based access control
└── SMS Verification: Mock system for development/testing

================================================================================
                                DEVELOPMENT SETUP
================================================================================

LOCAL DEVELOPMENT:
├── Backend Server: node server-db.js (port 8003)
├── Development Mode: node start-dev.js (dual server setup)
├── Database: Connect to Railway PostgreSQL (remote)
├── Environment: Use .env file for local secrets
└── React Development: cd mainapp && npm start (port 3000)

DEVELOPMENT COMMANDS:
├── Start Production Server: node server-db.js
├── Start Development Mode: node start-dev.js
├── Install Root Dependencies: npm install
├── Install React Dependencies: cd mainapp && npm install
├── Build React App: cd mainapp && npm run build
├── Run Migrations: node run-multi-role-migration.js
└── Test Railway Build: ./build-railway.sh

REQUIRED DEPENDENCIES (package.json):
├── express: Web server framework
├── cors: Cross-origin resource sharing
├── morgan: HTTP request logger
├── pg: PostgreSQL client
├── jsonwebtoken: JWT authentication
├── bcryptjs: Password hashing
├── dotenv: Environment variable loading
└── path: File path utilities (Node.js built-in)

LOCAL DEVELOPMENT URLS:
├── Production Server: http://localhost:8003
│   └── Serves both React app and API endpoints
├── React Development: http://localhost:3000 (if using npm start)
│   └── Hot reload for React development
├── API Health Check: http://localhost:8003/api/health
│   └── Verifies server and database connection
├── Legacy Admin: http://localhost:8003/admin.html
│   └── Static admin interface
└── Legacy Customer: http://localhost:8003/customer-approval-check.html
    └── Static customer interface

TESTING:
├── Server Health: curl http://localhost:8003/api/health
├── React App: Open http://localhost:8003 in browser
├── API Endpoints: Test with Postman or curl
├── Database: Check Railway dashboard for connection
├── Build Process: Run ./build-railway.sh locally
└── Full Integration: Test form submissions and responses

================================================================================
                                MONITORING & LOGS
================================================================================

RAILWAY MONITORING:
├── Service Status: Railway Dashboard → Service Overview
├── Database Health: Railway Dashboard → Database Metrics
├── Application Logs: Railway Dashboard → Logs Tab
├── Performance: Response times and resource usage
├── Deployments: Build history and deployment status
└── Environment: Variables and secrets management

LOG SOURCES:
├── Application Logs: server-db.js console output
├── Build Logs: Nixpacks build process output
├── Database Logs: PostgreSQL connection and query logs
├── HTTP Logs: Morgan middleware request logging
└── Error Logs: Uncaught exceptions and API errors

MONITORING ENDPOINTS:
├── Health Check: GET /api/health (server and DB status)
├── Admin Stats: GET /api/admin/stats (requires authentication)
├── Database Status: Built into health check endpoint
└── Service Metrics: Available in Railway dashboard

================================================================================
                                SECURITY MEASURES
================================================================================

AUTHENTICATION & AUTHORIZATION:
├── JWT Tokens: Secure session management with expiration
├── Password Hashing: Bcrypt with salt rounds for security
├── SMS Verification: Two-factor authentication system
├── Role-Based Access: Admin vs Customer permissions
└── Session Management: Secure token storage and validation

DATA PROTECTION:
├── HTTPS: Enforced by Railway platform automatically
├── CORS: Configured to allow specific origins
├── Input Validation: Server-side sanitization and validation
├── SQL Injection: Parameterized queries with pg library
├── XSS Protection: Content Security Policy headers
└── Environment Variables: Secrets stored in Railway dashboard

NETWORK SECURITY:
├── Railway Platform: Built-in DDoS protection
├── Database: Railway managed PostgreSQL with encryption
├── API Rate Limiting: Built-in Railway protections
├── Secure Headers: Express security middleware
└── Git Security: Sensitive files in .gitignore

================================================================================
                                BACKUP & RECOVERY
================================================================================

DATABASE BACKUPS:
├── Railway Automatic: Daily backups with point-in-time recovery
├── Manual Backup: Railway dashboard export options
├── Migration Scripts: Version controlled in /migrations/
├── Schema Backup: Automated dumps in /backup/database/
└── Recovery: Railway dashboard restore functionality

CODE BACKUPS:
├── GitHub Repository: Primary source code backup
├── Branch Protection: Main branch requires reviews
├── Release Tags: Version controlled releases
├── Local Development: Developer machine backups
└── Railway Deployment: Automatic code snapshots

DISASTER RECOVERY PLAN:
├── Service Restoration: Instant redeploy from GitHub
├── Database Recovery: Railway backup restoration
├── Environment Variables: Documented in Railway dashboard
├── DNS Management: Railway automatic domain management
└── Rollback Strategy: Git revert + Railway redeploy

================================================================================
                                PERFORMANCE OPTIMIZATION
================================================================================

RAILWAY PLATFORM OPTIMIZATIONS:
├── Global CDN: Railway edge network for static assets
├── Container Scaling: Automatic scaling based on demand
├── Database Optimization: Connection pooling and indexing
├── Caching: Express static file caching
└── Compression: Gzip compression for responses

APPLICATION OPTIMIZATIONS:
├── React Build: Production optimized bundle
├── Static Assets: Served directly by Express
├── Database Queries: Indexed and optimized
├── API Responses: Minimal JSON payloads
├── Image Optimization: Compressed static assets
└── Code Splitting: React lazy loading

MONITORING METRICS:
├── Response Times: Railway dashboard metrics
├── Database Performance: Query execution times
├── Memory Usage: Container resource monitoring
├── Error Rates: Application and HTTP error tracking
├── Build Times: Nixpacks build performance
└── User Experience: Frontend loading times

================================================================================
                                TROUBLESHOOTING GUIDE
================================================================================

COMMON ISSUES & SOLUTIONS:

1. RAILWAY BUILD FAILURES:
   ├── Issue: Nixpacks build failing
   ├── Check: nixpacks.toml configuration
   ├── Verify: Node.js version compatibility
   ├── Solution: Update nixPkgs or build commands
   └── Test: Run ./build-railway.sh locally

2. SERVER NOT STARTING:
   ├── Issue: server-db.js crashes on startup
   ├── Check: Railway logs for error messages
   ├── Verify: Environment variables (DATABASE_URL, PORT)
   ├── Solution: Fix missing dependencies or env vars
   └── Test: Run node server-db.js locally

3. DATABASE CONNECTION ISSUES:
   ├── Issue: Cannot connect to PostgreSQL
   ├── Check: DATABASE_URL environment variable
   ├── Verify: Railway database service status
   ├── Solution: Restart database or check credentials
   └── Test: Check /api/health endpoint

4. REACT APP NOT LOADING:
   ├── Issue: Frontend shows 404 or blank page
   ├── Check: mainapp/build/ directory exists
   ├── Verify: Build process completed successfully
   ├── Solution: Rebuild React app or check static file serving
   └── Test: Access direct file paths

5. API ENDPOINTS FAILING:
   ├── Issue: API calls return 500 or timeout
   ├── Check: Railway application logs
   ├── Verify: Database connection and query syntax
   ├── Solution: Fix SQL queries or add error handling
   └── Test: Use curl or Postman to test endpoints

6. LOCAL DEVELOPMENT ISSUES:
   ├── EADDRINUSE Port 3001: Kill process or change port
   ├── Missing Dependencies: Run npm install in root and mainapp/
   ├── Database Connection: Use Railway DATABASE_URL locally
   ├── CORS Issues: Check origin configuration
   └── Build Errors: Check React app dependencies

DEBUGGING COMMANDS:
├── Check Railway Logs: Railway dashboard → Logs
├── Test Local Server: node server-db.js
├── Test API Health: curl http://localhost:8003/api/health
├── Check Database: Railway dashboard → Database
├── Verify Build: cd mainapp && npm run build
└── Test Full Stack: Open http://localhost:8003

================================================================================
                                CONTACT & SUPPORT
================================================================================

PLATFORM SUPPORT:
├── Railway: https://railway.app/help
├── GitHub: https://support.github.com
├── PostgreSQL: https://www.postgresql.org/support/
└── Node.js: https://nodejs.org/en/support/

DEVELOPMENT TEAM:
├── Lead Developer: MichaelMishaev
├── Repository: GitHub.com/MichaelMishaev/bankDev2_standalone
├── Project: BankimOnline Banking System
└── Version: 5.0.0 Production (Railway-only)

DOCUMENTATION FILES:
├── System Architecture: This file (toDev/SystemConfigs.txt)
├── API Documentation: toDev/bankMgmt.txt
├── Enhancement Tasks: toDev/BANKING_SYSTEM_ENHANCEMENT_TASK.txt
├── Development Guide: DEVHelp/LOCAL_DEVELOPMENT_GUIDE.txt
└── Quick Commands: DEVHelp/QUICK_COMMANDS.txt

================================================================================
                                VERSION HISTORY
================================================================================

v5.0.0 (December 2024) - CURRENT - RAILWAY MIGRATION
├── ✅ Complete migration from Vercel to Railway
├── ✅ Unified deployment (Frontend + Backend + Database)
├── ✅ Nixpacks build system implementation
├── ✅ React app integration with Express server
├── ✅ Single domain architecture (no CORS issues)
├── ✅ Improved performance and cost efficiency
├── ✅ Simplified deployment workflow
└── ✅ Updated system documentation

v4.0.0 (December 2024) - VERCEL + RAILWAY
├── ✅ Enhanced multilingual UX (EN/RU/HE)
├── ✅ Animated suggestions and notifications
├── ✅ Fixed button state management
├── ✅ Improved bank requirements demo
├── ✅ Gradient buttons and smooth transitions
├── ✅ Custom Tailwind CSS implementation
├── ✅ Dual deployment (Vercel frontend + Railway backend)
└── ✅ Comprehensive system documentation

v3.0.0 (November 2024) - API COMPLETION
├── ✅ Full API implementation
├── ✅ Database schema completion
├── ✅ Admin panel functionality
├── ✅ Customer approval system
└── ✅ Multi-role authentication

v2.0.0 (October 2024) - REACT DEVELOPMENT
├── ✅ React application development
├── ✅ Basic API endpoints
├── ✅ Database integration
└── ✅ Initial deployment setup

v1.0.0 (September 2024) - PROJECT INITIALIZATION
├── ✅ Project initialization
├── ✅ Basic HTML/CSS structure
├── ✅ Initial banking forms
└── ✅ Development environment setup

================================================================================
                                ARCHITECTURE DECISIONS
================================================================================

WHY RAILWAY OVER VERCEL:
├── Single Service: Frontend + Backend + Database in one place
├── Cost Efficiency: No separate frontend hosting costs
├── No CORS Issues: Same-origin requests eliminate complexity
├── Simplified Deployment: One service to manage and monitor
├── Better Integration: Database, backend, and frontend together
└── Easier Scaling: Unified resource management

WHY NIXPACKS:
├── Automatic Detection: Detects Node.js project automatically
├── Multi-Phase Builds: Separate install, build, and start phases
├── Reproducible: Consistent builds across environments
├── Flexible: Custom configuration via nixpacks.toml
└── Railway Native: Optimized for Railway platform

WHY EXPRESS + REACT BUILD:
├── Static Serving: Express serves React build efficiently
├── API Integration: Same server handles API and frontend
├── React Router: Catch-all routing for SPA functionality
├── Performance: No separate frontend server needed
└── Simplicity: Single codebase, single deployment

WHY POSTGRESQL:
├── ACID Compliance: Reliable transactions for banking data
├── JSON Support: Flexible data storage when needed
├── Scalability: Handles concurrent banking operations
├── Railway Integration: Managed service with automatic backups
└── SQL Standard: Familiar query language and tooling

================================================================================
                                END OF DOCUMENTATION
================================================================================

This document serves as the complete system configuration reference for the
BankimOnline banking application running on Railway. Keep this file updated 
with any system changes, new integrations, or architectural modifications.

For technical support or questions about this configuration, refer to the
contact information above or consult the additional documentation files
in the /toDev and /DEVHelp directories.

Last Updated: December 2024
Document Version: 2.0 (Railway Migration)
System Status: PRODUCTION READY ✅
Architecture: Railway Full-Stack Deployment 