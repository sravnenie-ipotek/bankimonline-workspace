name: Deploy Production (STAGING TEST)
# SAFETY: This workflow is for TESTING ONLY - does not affect production

on:
  workflow_dispatch:  # Manual trigger only for maximum safety
    inputs:
      environment:
        description: 'Target environment (STAGING ONLY for now)'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
      dry_run:
        description: 'Dry run mode (no actual deployment)'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  
jobs:
  # SAFETY CHECK: Block production deployments
  safety-check:
    runs-on: ubuntu-latest
    steps:
      - name: 🛡️ Safety Gate
        run: |
          if [ "${{ github.event.inputs.environment }}" != "staging" ]; then
            echo "❌ ERROR: Only staging deployments allowed in this workflow"
            echo "This is a TESTING workflow - production deployment disabled"
            exit 1
          fi
          echo "✅ Safety check passed - staging deployment allowed"

  # Quality gates - all must pass before deployment
  quality-gates:
    needs: safety-check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [api, web]
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install Root Dependencies
        run: npm ci
        
      - name: 🔧 Install API Dependencies
        if: matrix.component == 'api'
        working-directory: server
        run: npm install
        
      - name: 🔧 Install Web Dependencies  
        if: matrix.component == 'web'
        working-directory: mainapp
        run: npm ci
        
      - name: 🧪 Run API Tests
        if: matrix.component == 'api'
        working-directory: server
        run: |
          # Basic syntax check
          node -c server-db.js
          echo "✅ API syntax validation passed"
          
      - name: 🧪 Run Web Tests
        if: matrix.component == 'web'
        working-directory: mainapp
        run: |
          # Run frontend tests if they exist
          npm run test --if-present
          echo "✅ Web tests completed"
          
      - name: 🏗️ Build Web Application
        if: matrix.component == 'web'
        working-directory: mainapp
        run: |
          npm run build
          echo "✅ Web build completed"
          
      - name: 📊 Validate Build Output
        if: matrix.component == 'web'
        working-directory: mainapp
        run: |
          # Check build directory exists and has content
          if [ ! -d "build" ] && [ ! -d "dist" ]; then
            echo "❌ ERROR: No build output directory found"
            exit 1
          fi
          
          BUILD_DIR="build"
          if [ -d "dist" ]; then
            BUILD_DIR="dist"
          fi
          
          if [ ! -f "$BUILD_DIR/index.html" ]; then
            echo "❌ ERROR: No index.html found in build output"
            exit 1
          fi
          
          echo "✅ Build validation passed"
          echo "📊 Build contents:"
          find "$BUILD_DIR" -type f | head -10

  # Create deployment package (for testing)
  package-release:
    needs: quality-gates
    runs-on: ubuntu-latest
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install Dependencies
        run: |
          npm ci
          cd mainapp && npm ci && cd ..
          
      - name: 🏗️ Build Frontend
        working-directory: mainapp
        run: npm run build
        
      - name: 📦 Create Release Package
        run: |
          echo "📦 Creating deployment package..."
          mkdir -p release/
          
          # Copy API files
          echo "📁 Copying API files..."
          cp -r server/ release/api/
          
          # Copy built frontend
          echo "📁 Copying built frontend..."
          if [ -d "mainapp/build" ]; then
            cp -r mainapp/build/ release/web/
          elif [ -d "mainapp/dist" ]; then
            cp -r mainapp/dist/ release/web/
          else
            echo "❌ ERROR: No build output found"
            exit 1
          fi
          
          # Copy documentation
          echo "📁 Copying documentation..."
          cp -r docs/ release/docs/ 2>/dev/null || echo "No docs directory found"
          
          # Copy package files
          echo "📁 Copying package files..."
          cp package*.json release/
          
          # Create package info
          echo "📋 Creating package info..."
          cat > release/PACKAGE_INFO.txt << EOF
          Package Created: $(date)
          Git Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          EOF
          
          echo "✅ Package creation completed"
          
      - name: 📋 Validate Release Package
        run: |
          echo "📊 Release package validation:"
          echo "============================================="
          
          # Check critical files exist
          echo "🔍 Checking critical files..."
          test -f release/api/server-db.js || { echo "❌ API server missing"; exit 1; }
          test -f release/web/index.html || { echo "❌ Web index.html missing"; exit 1; }
          test -f release/package.json || { echo "❌ package.json missing"; exit 1; }
          
          echo "✅ All critical files present"
          
          # Show package structure
          echo "📁 Package structure:"
          find release/ -type f | head -20
          
          # Show package size
          echo "📏 Package size:"
          du -sh release/
          
          # Validate web build
          echo "🌐 Web build validation:"
          WEB_FILES=$(find release/web -name "*.js" -o -name "*.css" -o -name "*.html" | wc -l)
          echo "Found $WEB_FILES web assets"
          
          if [ "$WEB_FILES" -lt 1 ]; then
            echo "❌ ERROR: No web assets found"
            exit 1
          fi
          
          echo "✅ Release package validation passed"
          
      - name: 📤 Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-package-${{ github.sha }}
          path: release/
          retention-days: 7
          compression-level: 6
          
      - name: 📋 Deployment Summary
        run: |
          echo "🎯 STAGING DEPLOYMENT SUMMARY"
          echo "============================="
          echo "✅ Quality gates passed"
          echo "✅ Build completed successfully"
          echo "✅ Package created and validated"
          echo "📦 Artifact uploaded: release-package-${{ github.sha }}"
          echo ""
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "🧪 DRY RUN MODE: No actual deployment performed"
            echo "Download the artifact to test manually"
          else
            echo "⚠️  STAGING MODE: Package ready for staging deployment"
          fi
          echo ""
          echo "🎯 Next steps:"
          echo "1. Download and inspect the release artifact"
          echo "2. Test the package locally"
          echo "3. If all looks good, proceed with production workflow"

  # Simulate deployment (without actually deploying)
  simulate-deployment:
    needs: package-release
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run == 'false'
    steps:
      - name: 🎭 Simulate Deployment Process
        run: |
          echo "🎭 SIMULATING DEPLOYMENT PROCESS"
          echo "==============================="
          echo "📦 Downloading release package..."
          sleep 2
          echo "✅ Package downloaded"
          
          echo "🔍 Validating package integrity..."
          sleep 1
          echo "✅ Package validation passed"
          
          echo "📂 Creating deployment directory..."
          sleep 1
          echo "✅ Deployment directory created"
          
          echo "🔄 Extracting package..."
          sleep 2
          echo "✅ Package extracted"
          
          echo "🔗 Creating atomic symlink..."
          sleep 1
          echo "✅ Symlink created"
          
          echo "🔄 Service restart simulation..."
          sleep 1
          echo "✅ Service restarted"
          
          echo "🏥 Health check simulation..."
          sleep 2
          echo "✅ Health checks passed"
          
          echo "🎯 DEPLOYMENT SIMULATION COMPLETE"
          echo "All steps would execute successfully in production"