name: Deploy to Test & Production

on:
  push:
    branches:
      - main  # Deploy to test on main push
      - production  # Deploy to prod on production branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - production
          - both

env:
  TEST_HOST: 45.83.42.74
  PROD_HOST: 185.253.72.80
  TEST_PATH: /var/www/bankim
  PROD_PATH: /var/www/bankim

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend dependencies
        run: npm install

      - name: Install frontend dependencies
        run: |
          cd mainapp
          npm install

      - name: Update version
        run: |
          cd mainapp
          npm run version:update

      - name: Build frontend
        run: |
          cd mainapp
          npm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy
          # Copy backend files
          cp -r server deploy/
          cp package*.json deploy/
          cp ecosystem.config.js deploy/
          # Copy frontend build
          cp -r mainapp/build deploy/
          cp -r mainapp/public deploy/
          # Copy essential files
          cp -r migrations deploy/
          cp -r uploads deploy/ || mkdir deploy/uploads
          # Create clean package for production
          cd deploy && npm install --production --no-optional

      - name: Create deployment archive
        run: |
          tar -czf deployment-$(date +%Y%m%d-%H%M%S).tar.gz -C deploy .
          ls -la deployment-*.tar.gz

      - name: Deploy to Test Environment
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'test' || github.event.inputs.environment == 'both'))
        run: |
          echo "üß™ DEPLOYING TO TEST ENVIRONMENT"
          echo "================================"
          
          # Install sshpass for automated deployment
          sudo apt-get update && sudo apt-get install -y sshpass
          
          # Get the latest deployment package
          DEPLOY_FILE=$(ls -t deployment-*.tar.gz | head -1)
          echo "üì¶ Deploying: $DEPLOY_FILE"
          
          # Create blue-green deployment structure
          sshpass -p "3GM8jHZuTWzDXe" ssh -o StrictHostKeyChecking=no root@$TEST_HOST << 'EOF'
            # Prepare deployment directories
            mkdir -p /var/www/bankim/{blue,green}
            
            # Determine current and new slots
            if [ -L /var/www/bankim/current ]; then
              CURRENT_SLOT=$(readlink /var/www/bankim/current | xargs basename)
            else
              CURRENT_SLOT="blue"
            fi
            
            NEW_SLOT=$([ "$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
            echo "Current slot: $CURRENT_SLOT, Deploying to: $NEW_SLOT"
            
            # Clean new slot
            rm -rf /var/www/bankim/$NEW_SLOT/*
            
            # Ensure PM2 is installed
            command -v pm2 >/dev/null 2>&1 || npm install -g pm2
          EOF
          
          # Upload deployment package
          echo "üì§ Uploading deployment package..."
          sshpass -p "3GM8jHZuTWzDXe" scp -o StrictHostKeyChecking=no $DEPLOY_FILE root@$TEST_HOST:/tmp/
          
          # Extract and deploy
          sshpass -p "3GM8jHZuTWzDXe" ssh -o StrictHostKeyChecking=no root@$TEST_HOST << EOF
            cd /tmp
            DEPLOY_FILE=\$(ls -t deployment-*.tar.gz | head -1)
            
            # Determine deployment slot
            if [ -L /var/www/bankim/current ]; then
              CURRENT_SLOT=\$(readlink /var/www/bankim/current | xargs basename)
            else
              CURRENT_SLOT="blue"
            fi
            NEW_SLOT=\$([ "\$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
            
            echo "Extracting to /var/www/bankim/\$NEW_SLOT"
            tar -xzf \$DEPLOY_FILE -C /var/www/bankim/\$NEW_SLOT
            
            # Set permissions
            chown -R root:root /var/www/bankim/\$NEW_SLOT
            chmod -R 755 /var/www/bankim/\$NEW_SLOT
            
            # Switch to new deployment
            ln -sfn /var/www/bankim/\$NEW_SLOT /var/www/bankim/current
            
            # Restart application
            cd /var/www/bankim/current
            pm2 delete bankim-api 2>/dev/null || echo "Process not running"
            pm2 start ecosystem.config.js --env test
            pm2 save
            
            echo "‚úÖ Test deployment complete!"
            pm2 status
          EOF

      - name: Validate Test Deployment
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'test' || github.event.inputs.environment == 'both'))
        run: |
          echo "üîç VALIDATING TEST DEPLOYMENT"
          echo "============================="
          
          sleep 30  # Allow application to start
          
          # Test API health
          if curl -f --max-time 30 "http://45.83.42.74:8003/api/v1/health" > /dev/null 2>&1; then
            echo "‚úÖ Test API is responding"
          else
            echo "‚ùå Test API health check failed"
            exit 1
          fi

      - name: Deploy to Production Environment
        if: github.ref == 'refs/heads/production' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both'))
        run: |
          echo "üöÄ DEPLOYING TO PRODUCTION ENVIRONMENT"
          echo "======================================"
          
          # Install sshpass for automated deployment
          sudo apt-get update && sudo apt-get install -y sshpass
          
          # Get the latest deployment package
          DEPLOY_FILE=$(ls -t deployment-*.tar.gz | head -1)
          echo "üì¶ Deploying: $DEPLOY_FILE"
          
          # Prepare production server
          sshpass -p "Q23YP4MwsaPzD7" ssh -o StrictHostKeyChecking=no root@$PROD_HOST << 'EOF'
            # Install Node.js if not present
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
              apt-get install -y nodejs
            fi
            
            # Install PM2 if not present
            command -v pm2 >/dev/null 2>&1 || npm install -g pm2
            
            # Prepare deployment directories
            mkdir -p /var/www/bankim/{blue,green}
            
            # Determine current and new slots
            if [ -L /var/www/bankim/current ]; then
              CURRENT_SLOT=$(readlink /var/www/bankim/current | xargs basename)
            else
              CURRENT_SLOT="blue"
            fi
            
            NEW_SLOT=$([ "$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
            echo "Production - Current slot: $CURRENT_SLOT, Deploying to: $NEW_SLOT"
            
            # Clean new slot
            rm -rf /var/www/bankim/$NEW_SLOT/*
          EOF
          
          # Upload deployment package to production
          echo "üì§ Uploading to production server..."
          sshpass -p "Q23YP4MwsaPzD7" scp -o StrictHostKeyChecking=no $DEPLOY_FILE root@$PROD_HOST:/tmp/
          
          # Extract and deploy to production
          sshpass -p "Q23YP4MwsaPzD7" ssh -o StrictHostKeyChecking=no root@$PROD_HOST << EOF
            cd /tmp
            DEPLOY_FILE=\$(ls -t deployment-*.tar.gz | head -1)
            
            # Determine deployment slot
            if [ -L /var/www/bankim/current ]; then
              CURRENT_SLOT=\$(readlink /var/www/bankim/current | xargs basename)
            else
              CURRENT_SLOT="blue"
            fi
            NEW_SLOT=\$([ "\$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
            
            echo "Extracting to /var/www/bankim/\$NEW_SLOT"
            tar -xzf \$DEPLOY_FILE -C /var/www/bankim/\$NEW_SLOT
            
            # Set permissions
            chown -R root:root /var/www/bankim/\$NEW_SLOT
            chmod -R 755 /var/www/bankim/\$NEW_SLOT
            
            # Configure web server proxy (if needed)
            if command -v nginx >/dev/null 2>&1; then
              echo "Configuring nginx proxy..."
              echo 'server {' > /etc/nginx/sites-available/bankim
              echo '    listen 80;' >> /etc/nginx/sites-available/bankim
              echo '    server_name bankimonline.com www.bankimonline.com;' >> /etc/nginx/sites-available/bankim
              echo '    ' >> /etc/nginx/sites-available/bankim
              echo '    location / {' >> /etc/nginx/sites-available/bankim
              echo '        proxy_pass http://localhost:8003;' >> /etc/nginx/sites-available/bankim
              echo '        proxy_http_version 1.1;' >> /etc/nginx/sites-available/bankim
              echo '        proxy_set_header Upgrade $http_upgrade;' >> /etc/nginx/sites-available/bankim
              echo "        proxy_set_header Connection 'upgrade';" >> /etc/nginx/sites-available/bankim
              echo '        proxy_set_header Host $host;' >> /etc/nginx/sites-available/bankim
              echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/sites-available/bankim
              echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/sites-available/bankim
              echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/sites-available/bankim
              echo '        proxy_cache_bypass $http_upgrade;' >> /etc/nginx/sites-available/bankim
              echo '    }' >> /etc/nginx/sites-available/bankim
              echo '}' >> /etc/nginx/sites-available/bankim
              ln -sf /etc/nginx/sites-available/bankim /etc/nginx/sites-enabled/
              nginx -t && systemctl reload nginx || echo "Nginx config issue"
            fi
            
            # Switch to new deployment
            ln -sfn /var/www/bankim/\$NEW_SLOT /var/www/bankim/current
            
            # Start application
            cd /var/www/bankim/current
            pm2 delete bankim-api 2>/dev/null || echo "Process not running"
            pm2 start ecosystem.config.js --env production
            pm2 save
            pm2 startup || echo "PM2 startup already configured"
            
            echo "üöÄ Production deployment complete!"
            pm2 status
          EOF

      - name: Validate Production Deployment
        if: github.ref == 'refs/heads/production' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both'))
        run: |
          echo "üîç VALIDATING PRODUCTION DEPLOYMENT"
          echo "=================================="
          
          sleep 60  # Allow application to start
          
          # Test production API health
          if curl -f --max-time 30 "http://185.253.72.80:8003/api/v1/health" > /dev/null 2>&1; then
            echo "‚úÖ Production API is responding"
          else
            echo "‚ùå Production API health check failed"
            # Don't exit here to allow manual intervention
          fi
          
          echo "üéâ Production deployment completed!"
          echo "üåê Check: http://bankimonline.com"
          echo "üìä API: http://185.253.72.80:8003/api/v1/health"

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ CLEANUP"
          echo "=========="
          # Remove deployment files
          rm -f deployment-*.tar.gz
          rm -rf deploy/
          echo "‚úÖ Cleanup complete"

      - name: Deployment Summary
        if: always()
        run: |
          echo ""
          echo "üìã DEPLOYMENT SUMMARY"
          echo "===================="
          echo "üïê Time: $(date)"
          echo "üìç Branch: ${{ github.ref_name }}"
          echo "üî¢ Commit: ${{ github.sha }}"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "üß™ Test: https://dev2.bankimonline.com (45.83.42.74:8003)"
          fi
          if [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "üè¶ Production: https://bankimonline.com (185.253.72.80:8003)"
          fi
          echo "===================="