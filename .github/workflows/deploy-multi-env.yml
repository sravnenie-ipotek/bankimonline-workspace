name: Deploy to Test & Production

on:
  push:
    branches:
      - develop  # Deploy to test environment
      - main     # Deploy to production environment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - production
          - both

env:
  TEST_HOST: 45.83.42.74
  PROD_HOST: 185.253.72.80
  TEST_PATH: /var/www/bankim
  PROD_PATH: /var/www/bankim

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Create .env file from secrets
        run: |
          echo "🔐 Creating .env file from GitHub secrets (SOURCE OF TRUTH)"
          cat > .env << EOF
          # CI/CD Environment Configuration
          # Generated from GitHub Secrets (SOURCE OF TRUTH)
          DATABASE_URL=${{ secrets.DATABASE_URL || 'postgresql://postgres:lgqPEzvVbSCviTybKqMbzJkYvOUetJjt@maglev.proxy.rlwy.net:43809/railway' }}
          CONTENT_DATABASE_URL=${{ secrets.CONTENT_DATABASE_URL || 'postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway' }}
          MANAGEMENT_DATABASE_URL=${{ secrets.MANAGEMENT_DATABASE_URL || 'postgresql://postgres:lgqPEzvVbSCviTybKqMbzJkYvOUetJjt@maglev.proxy.rlwy.net:43809/railway' }}
          JWT_SECRET=${{ secrets.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production-2024' }}
          JWT_BANK_SECRET=${{ secrets.JWT_BANK_SECRET || 'your-bank-secret-key-2024' }}
          PORT=8003
          NODE_ENV=production
          EOF
          echo "✅ .env file created for CI/CD"

      - name: Install backend dependencies
        run: npm install

      - name: Install frontend dependencies
        run: |
          cd mainapp
          npm install

      - name: Update version
        run: |
          cd mainapp
          npm run version:update

      - name: Build frontend
        run: |
          cd mainapp
          npm run build

      - name: Pre-deployment comprehensive validation
        run: |
          echo "🔍 Running comprehensive pre-deployment validation..."
          echo "⚠️ HARD GATES ACTIVE: ALL validations MUST pass"
          echo "🔐 LOCAL .env IS THE SOURCE OF TRUTH!"
          echo "================================"
          
          # 0. ENFORCE NO HARDCODED DATABASE URLS
          echo "0️⃣ Enforcing no hardcoded database URLs..."
          npm run enforce:no-hardcoded
          if [ $? -ne 0 ]; then
            echo "❌ DEPLOYMENT BLOCKED: Hardcoded database URLs found!"
            echo "LOCAL .env MUST be the SOURCE OF TRUTH!"
            exit 1
          fi
          
          # 1. Validate all migrations are applied
          echo "1️⃣ Validating database migrations..."
          npm run validate:migrations
          if [ $? -ne 0 ]; then
            echo "❌ DEPLOYMENT BLOCKED: Missing database migrations"
            echo "Apply all migrations before deployment"
            exit 1
          fi
          
          # 2. Validate database schema
          echo "2️⃣ Validating database schema..."
          npm run test:pre-deploy
          if [ $? -ne 0 ]; then
            echo "❌ DEPLOYMENT BLOCKED: Database schema validation FAILED"
            echo "Fix the schema issues before attempting deployment"
            exit 1
          fi
          
          # 3. Run auth integration tests
          echo "3️⃣ Running authentication integration tests..."
          npm run test:auth
          if [ $? -ne 0 ]; then
            echo "❌ DEPLOYMENT BLOCKED: Authentication tests FAILED"
            echo "Auth endpoints will fail in production!"
            exit 1
          fi
          
          echo "================================"
          echo "✅ ALL VALIDATIONS PASSED"
          echo "✅ LOCAL .env is SOURCE OF TRUTH"
          echo "✅ Safe to proceed with deployment"

      - name: Create deployment package
        run: |
          mkdir -p deploy
          # Copy backend files
          cp -r server deploy/
          cp package*.json deploy/
          cp ecosystem.config.js deploy/
          # Copy frontend build
          cp -r mainapp/build deploy/
          cp -r mainapp/public deploy/
          # Copy essential files
          cp -r migrations deploy/
          cp -r uploads deploy/ || mkdir deploy/uploads
          # Copy scripts including health check
          cp -r scripts deploy/
          # Create clean package for production
          cd deploy && npm install --omit=dev

      - name: Create deployment archive
        run: |
          tar -czf deployment-$(date +%Y%m%d-%H%M%S).tar.gz -C deploy .
          ls -la deployment-*.tar.gz

      - name: Deploy to Test Environment
        if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'test' || github.event.inputs.environment == 'both'))
        run: |
          echo "🧪 DEPLOYING TO TEST ENVIRONMENT"
          echo "================================"
          
          # Install sshpass for automated deployment
          sudo apt-get update && sudo apt-get install -y sshpass
          
          # Get the latest deployment package
          DEPLOY_FILE=$(ls -t deployment-*.tar.gz | head -1)
          echo "📦 Deploying: $DEPLOY_FILE"
          
          # Run pre-deployment validation on server
          echo "🔍 Running pre-deployment validation..."
          sshpass -p "3GM8jHZuTWzDXe" ssh -o StrictHostKeyChecking=no root@$TEST_HOST 'mkdir -p /var/www/bankim && echo "✅ Server accessible and ready for deployment"'
          
          # Create blue-green deployment structure
          sshpass -p "3GM8jHZuTWzDXe" ssh -o StrictHostKeyChecking=no root@$TEST_HOST << 'EOF'
            # Prepare deployment directories
            mkdir -p /var/www/bankim/{blue,green}
            
            # Determine current and new slots
            if [ -L /var/www/bankim/current ]; then
              CURRENT_SLOT=$(readlink /var/www/bankim/current | xargs basename)
            else
              CURRENT_SLOT="blue"
            fi
            
            NEW_SLOT=$([ "$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
            echo "Current slot: $CURRENT_SLOT, Deploying to: $NEW_SLOT"
            
            # Clean new slot
            rm -rf /var/www/bankim/$NEW_SLOT/*
            
            # Ensure PM2 is installed
            command -v pm2 >/dev/null 2>&1 || npm install -g pm2
          EOF
          
          # Upload deployment package
          echo "📤 Uploading deployment package..."
          sshpass -p "3GM8jHZuTWzDXe" scp -o StrictHostKeyChecking=no $DEPLOY_FILE root@$TEST_HOST:/tmp/
          
          # Extract and deploy
          sshpass -p "3GM8jHZuTWzDXe" ssh -o StrictHostKeyChecking=no root@$TEST_HOST << EOF
            cd /tmp
            DEPLOY_FILE=\$(ls -t deployment-*.tar.gz | head -1)
            
            # Determine deployment slot
            if [ -L /var/www/bankim/current ]; then
              CURRENT_SLOT=\$(readlink /var/www/bankim/current | xargs basename)
            else
              CURRENT_SLOT="blue"
            fi
            NEW_SLOT=\$([ "\$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
            
            echo "Extracting to /var/www/bankim/\$NEW_SLOT"
            tar -xzf \$DEPLOY_FILE -C /var/www/bankim/\$NEW_SLOT
            
            # Create .env file on server
            echo "🔐 Creating .env file on TEST server"
            cd /var/www/bankim/\$NEW_SLOT
            cat > .env << 'EOF'
            # TEST Environment Configuration
            # CRITICAL: DATABASE_URL must point to CORE database (maglev), not CONTENT!
            DATABASE_URL=postgresql://postgres:lgqPEzvVbSCviTybKqMbzJkYvOUetJjt@maglev.proxy.rlwy.net:43809/railway
            CONTENT_DATABASE_URL=postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway
            MANAGEMENT_DATABASE_URL=postgresql://postgres:lgqPEzvVbSCviTybKqMbzJkYvOUetJjt@maglev.proxy.rlwy.net:43809/railway
            JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-2024
            JWT_BANK_SECRET=your-bank-secret-key-2024
            PORT=8003
            NODE_ENV=production
            RAILWAY_ENVIRONMENT=production
            CORS_ALLOWED_ORIGINS=https://bankimonline.com,https://dev2.bankimonline.com,http://localhost:5173
            LOG_LEVEL=info
            HEALTH_CHECK_ENABLED=true
            METRICS_ENABLED=true
            EOF
            echo "✅ .env file created on server"
            
            # Install dependencies on server to ensure all modules are present
            echo "Installing dependencies on server..."
            npm install
            if [ \$? -ne 0 ]; then
              echo "❌ DEPLOYMENT BLOCKED: npm install FAILED"
              echo "Cannot proceed without proper dependencies"
              exit 1
            fi
            echo "✅ Dependencies installed successfully"
            
            # Set permissions
            chown -R root:root /var/www/bankim/\$NEW_SLOT
            chmod -R 755 /var/www/bankim/\$NEW_SLOT
            
            # Switch to new deployment BEFORE configuring NGINX
            ln -sfn /var/www/bankim/\$NEW_SLOT /var/www/bankim/current
            
            # Configure NGINX - use config from scripts
            echo "Configuring NGINX..."
            if [ -f /var/www/bankim/current/scripts/nginx-test.conf ]; then
              cp /var/www/bankim/current/scripts/nginx-test.conf /etc/nginx/sites-available/bankim
              echo "✅ NGINX config copied from scripts"
            else
              echo "⚠️ NGINX config script not found, will use existing config or basic setup"
            fi
            
            # Remove any conflicting configs
            rm -f /etc/nginx/sites-enabled/bankimonline
            ln -sf /etc/nginx/sites-available/bankim /etc/nginx/sites-enabled/
            
            # Test and reload NGINX
            if nginx -t; then
              systemctl reload nginx
              echo "✅ NGINX configured successfully"
            else
              echo "❌ NGINX configuration failed"
              exit 1
            fi
            
            # Restart application with absolute path
            cd /var/www/bankim/current
            pm2 delete bankim-api 2>/dev/null || echo "Process not running"
            # Start with absolute CWD to ensure correct path
            pm2 start server/server-db.js --name bankim-api -i 2 --cwd /var/www/bankim/current
            pm2 save --force
            
            echo "✅ Test deployment complete!"
            pm2 status
          EOF

      - name: Validate Test Deployment
        if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'test' || github.event.inputs.environment == 'both'))
        run: |
          echo "🔍 COMPREHENSIVE TEST DEPLOYMENT VALIDATION"
          echo "==========================================="
          
          # Wait for services to stabilize
          echo "⏳ Waiting for services to start..."
          sleep 45
          
          # Use the comprehensive health check script on server
          echo "Running comprehensive health check..."
          sshpass -p "3GM8jHZuTWzDXe" ssh -o StrictHostKeyChecking=no root@$TEST_HOST '
            # Use the enhanced health check script from deployment
            if [ -f /var/www/bankim/current/scripts/deployment-health-check.sh ]; then
              echo "✅ Using enhanced health check script from deployment"
              cp /var/www/bankim/current/scripts/deployment-health-check.sh /var/www/bankim/
              chmod +x /var/www/bankim/deployment-health-check.sh
              
              # Run the comprehensive health check (test environment)
              if /var/www/bankim/deployment-health-check.sh test; then
                echo "✅ Test deployment validation successful"
              else
                echo "❌ Test deployment validation failed - initiating rollback"
                # Simple rollback logic
                if [ -d /var/www/bankim/blue ] && [ -d /var/www/bankim/green ]; then
                  CURRENT_SLOT=$(readlink /var/www/bankim/current | xargs basename)
                  ROLLBACK_SLOT=$([ "$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
                  echo "Rolling back to $ROLLBACK_SLOT..."
                  ln -sfn /var/www/bankim/$ROLLBACK_SLOT /var/www/bankim/current
                  pm2 restart bankim-api --update-env
                  echo "Rollback completed - please check manually"
                fi
                exit 1
              fi
            else
              echo "❌ DEPLOYMENT BLOCKED: Health check script not found"
              echo "deployment-health-check.sh is REQUIRED for safe deployments"
              echo "Cannot proceed without proper health validation"
              exit 1
            fi
          '
          
          echo "✅ Test deployment validation complete!"

      - name: Deploy to Production Environment
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both'))
        run: |
          echo "🚀 DEPLOYING TO PRODUCTION ENVIRONMENT"
          echo "======================================"
          
          # Install sshpass for automated deployment
          sudo apt-get update && sudo apt-get install -y sshpass
          
          # Get the latest deployment package
          DEPLOY_FILE=$(ls -t deployment-*.tar.gz | head -1)
          echo "📦 Deploying: $DEPLOY_FILE"
          
          # Prepare production server
          sshpass -p "Q23YP4MwsaPzD7" ssh -o StrictHostKeyChecking=no root@$PROD_HOST << 'EOF'
            # Install Node.js if not present
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
              apt-get install -y nodejs
            fi
            
            # Install PM2 if not present
            command -v pm2 >/dev/null 2>&1 || npm install -g pm2
            
            # Prepare deployment directories
            mkdir -p /var/www/bankim/{blue,green}
            
            # Determine current and new slots
            if [ -L /var/www/bankim/current ]; then
              CURRENT_SLOT=$(readlink /var/www/bankim/current | xargs basename)
            else
              CURRENT_SLOT="blue"
            fi
            
            NEW_SLOT=$([ "$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
            echo "Production - Current slot: $CURRENT_SLOT, Deploying to: $NEW_SLOT"
            
            # Clean new slot
            rm -rf /var/www/bankim/$NEW_SLOT/*
          EOF
          
          # Upload deployment package to production
          echo "📤 Uploading to production server..."
          sshpass -p "Q23YP4MwsaPzD7" scp -o StrictHostKeyChecking=no $DEPLOY_FILE root@$PROD_HOST:/tmp/
          
          # Extract and deploy to production
          sshpass -p "Q23YP4MwsaPzD7" ssh -o StrictHostKeyChecking=no root@$PROD_HOST << EOF
            cd /tmp
            DEPLOY_FILE=\$(ls -t deployment-*.tar.gz | head -1)
            
            # Determine deployment slot
            if [ -L /var/www/bankim/current ]; then
              CURRENT_SLOT=\$(readlink /var/www/bankim/current | xargs basename)
            else
              CURRENT_SLOT="blue"
            fi
            NEW_SLOT=\$([ "\$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
            
            echo "Extracting to /var/www/bankim/\$NEW_SLOT"
            tar -xzf \$DEPLOY_FILE -C /var/www/bankim/\$NEW_SLOT
            
            # Create .env file on server
            echo "🔐 Creating .env file on TEST server"
            cd /var/www/bankim/\$NEW_SLOT
            cat > .env << 'EOF'
            # TEST Environment Configuration
            # CRITICAL: DATABASE_URL must point to CORE database (maglev), not CONTENT!
            DATABASE_URL=postgresql://postgres:lgqPEzvVbSCviTybKqMbzJkYvOUetJjt@maglev.proxy.rlwy.net:43809/railway
            CONTENT_DATABASE_URL=postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway
            MANAGEMENT_DATABASE_URL=postgresql://postgres:lgqPEzvVbSCviTybKqMbzJkYvOUetJjt@maglev.proxy.rlwy.net:43809/railway
            JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-2024
            JWT_BANK_SECRET=your-bank-secret-key-2024
            PORT=8003
            NODE_ENV=production
            RAILWAY_ENVIRONMENT=production
            CORS_ALLOWED_ORIGINS=https://bankimonline.com,https://dev2.bankimonline.com,http://localhost:5173
            LOG_LEVEL=info
            HEALTH_CHECK_ENABLED=true
            METRICS_ENABLED=true
            EOF
            echo "✅ .env file created on server"
            
            # Install dependencies on server to ensure all modules are present
            echo "Installing dependencies on server..."
            npm install
            if [ \$? -ne 0 ]; then
              echo "❌ DEPLOYMENT BLOCKED: npm install FAILED"
              echo "Cannot proceed without proper dependencies"
              exit 1
            fi
            echo "✅ Dependencies installed successfully"
            
            # Set permissions
            chown -R root:root /var/www/bankim/\$NEW_SLOT
            chmod -R 755 /var/www/bankim/\$NEW_SLOT
            
            # Switch to new deployment
            ln -sfn /var/www/bankim/\$NEW_SLOT /var/www/bankim/current
            
            # Configure web server proxy (if needed)
            if command -v nginx >/dev/null 2>&1; then
              echo "Configuring nginx proxy for production..."
              if [ -f /var/www/bankim/current/scripts/nginx-prod.conf ]; then
                cp /var/www/bankim/current/scripts/nginx-prod.conf /etc/nginx/sites-available/bankimonline
                echo "✅ Production NGINX config copied from scripts"
              else
                echo "⚠️ Production NGINX config not found, keeping existing config"
              fi
              ln -sf /etc/nginx/sites-available/bankimonline /etc/nginx/sites-enabled/
              nginx -t && systemctl reload nginx || echo "Nginx config issue"
            fi
            
            # Start application
            cd /var/www/bankim/current
            pm2 delete bankim-api 2>/dev/null || echo "Process not running"
            pm2 start ecosystem.config.js --env production
            pm2 save
            pm2 startup || echo "PM2 startup already configured"
            
            echo "🚀 Production deployment complete!"
            pm2 status
          EOF

      - name: Validate Production Deployment
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both'))
        run: |
          echo "🔍 VALIDATING PRODUCTION DEPLOYMENT"
          echo "=================================="
          
          # Wait for services to stabilize
          echo "⏳ Waiting for services to start..."
          sleep 60
          
          # Use comprehensive health check on production
          sshpass -p "Q23YP4MwsaPzD7" ssh -o StrictHostKeyChecking=no root@$PROD_HOST '
            # Basic production health check
            echo "Testing production deployment..."
            FAILURES=0
            
            # Test PM2
            if ! pm2 status | grep -q "bankim-api.*online"; then
              echo "❌ PM2 bankim-api not online"
              FAILURES=$((FAILURES+1))
            fi
            
            # Test API
            if ! curl -f --max-time 30 "http://localhost:8003/api/health" > /dev/null 2>&1; then
              echo "❌ API health check failed"
              FAILURES=$((FAILURES+1))
            fi
            
            # Test NGINX
            if ! curl -f --max-time 10 "http://localhost/" > /dev/null 2>&1; then
              echo "❌ NGINX test failed"
              FAILURES=$((FAILURES+1))
            fi
            
            if [ $FAILURES -eq 0 ]; then
              echo "✅ Production deployment validation passed"
            else
              echo "⚠️ $FAILURES issues detected - manual verification recommended"
            fi
          '
          
          echo "🎉 Production deployment completed!"
          echo "🌐 Check: http://bankimonline.com"
          echo "📊 API: http://185.253.72.80:8003/api/health"

      - name: Setup Monitoring
        if: always()
        run: |
          echo "🔍 SETTING UP MONITORING"
          echo "======================="
          
          # Setup monitoring for test server
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]] || [[ "${{ github.event.inputs.environment }}" == "test" ]] || [[ "${{ github.event.inputs.environment }}" == "both" ]]; then
            echo "Setting up test server monitoring..."
            sshpass -p "3GM8jHZuTWzDXe" ssh -o StrictHostKeyChecking=no root@$TEST_HOST '
              # Ensure monitoring script exists and is in crontab
              if [ -f /var/www/bankim/monitor.sh ]; then
                # Add to crontab if not already there
                (crontab -l 2>/dev/null | grep -q "monitor.sh") || echo "*/2 * * * * /var/www/bankim/monitor.sh > /dev/null 2>&1" | crontab -
                echo "✅ Test server monitoring enabled"
              fi
            ' || echo "⚠️ Could not setup test server monitoring"
          fi
          
          # Setup monitoring for production server  
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.environment }}" == "production" ]] || [[ "${{ github.event.inputs.environment }}" == "both" ]]; then
            echo "Setting up production server monitoring..."
            sshpass -p "Q23YP4MwsaPzD7" ssh -o StrictHostKeyChecking=no root@$PROD_HOST '
              mkdir -p /var/www/bankim
              # Copy monitoring script from deployment if available
              if [ -f /var/www/bankim/current/scripts/monitor.sh ]; then
                cp /var/www/bankim/current/scripts/monitor.sh /var/www/bankim/
                chmod +x /var/www/bankim/monitor.sh
              else
                # Create basic monitoring for production (skip heredoc)
                echo "Monitor script will be copied from deployment"
              fi
              
              # Add monitoring to crontab if script exists
              if [ -f /var/www/bankim/monitor.sh ]; then
                chmod +x /var/www/bankim/monitor.sh
                (crontab -l 2>/dev/null | grep -q "monitor.sh") || echo "*/5 * * * * /var/www/bankim/monitor.sh" | crontab -
                echo "✅ Production server monitoring enabled"
              else
                echo "⚠️ Monitor script not found - will be added in next deployment"
              fi
            ' || echo "⚠️ Could not setup production server monitoring"
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 CLEANUP"
          echo "=========="
          # Remove deployment files
          rm -f deployment-*.tar.gz
          rm -rf deploy/
          echo "✅ Cleanup complete"

      - name: Deployment Summary
        if: always()
        run: |
          echo ""
          echo "📋 DEPLOYMENT SUMMARY"
          echo "===================="
          echo "🕐 Time: $(date)"
          echo "📍 Branch: ${{ github.ref_name }}"
          echo "🔢 Commit: ${{ github.sha }}"
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]] || [[ "${{ github.event.inputs.environment }}" == "test" ]] || [[ "${{ github.event.inputs.environment }}" == "both" ]]; then
            echo "🧪 Test: https://dev2.bankimonline.com"
            echo "📊 Test API: https://dev2.bankimonline.com/api/health"
          fi
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.environment }}" == "production" ]] || [[ "${{ github.event.inputs.environment }}" == "both" ]]; then
            echo "🏦 Production: https://bankimonline.com"
            echo "📊 Production API: http://185.253.72.80:8003/api/health"
          fi
          echo "🔍 Monitoring: Every 2 minutes (test) / 5 minutes (prod)"
          echo "🛠️ Rollback: Blue-green deployment with automatic rollback"
          echo "===================="