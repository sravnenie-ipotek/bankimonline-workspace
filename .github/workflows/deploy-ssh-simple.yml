name: Deploy to SSH Server (Simple)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  push:
    branches:
      - main
      - production
      - feature/unified-translation-system

jobs:
  deploy:
    name: Deploy to 45.83.42.74
    runs-on: ubuntu-latest
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
      - name: 🧪 Test SSH Connection
        run: |
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "echo '✅ SSH connection successful'"
              
      - name: 🧹 Clean up disk space
        run: |
          echo "Checking disk space before cleanup..."
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "df -h /"
          
          echo "Cleaning up old releases (keeping last 2)..."
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "cd /var/www/bankim/releases 2>/dev/null && ls -t | tail -n +3 | xargs -r rm -rf || true"
          
          echo "Cleaning npm cache..."
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "npm cache clean --force 2>/dev/null || true"
          
          echo "Disk space after cleanup..."
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "df -h /"
              
      - name: 📦 Create deployment directory
        run: |
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "mkdir -p /var/www/bankim/{current,releases,shared}"
              
      - name: 🚀 Deploy Application
        run: |
          RELEASE_DIR="/var/www/bankim/releases/$(date +%Y%m%d%H%M%S)"
          
          # Create release directory
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "mkdir -p $RELEASE_DIR"
          
          # Sync files
          rsync -avz --delete \
                --exclude='.git' \
                --exclude='node_modules' \
                --exclude='.env' \
                --exclude='uploads' \
                --exclude='logs' \
                -e "ssh -i ~/.ssh/deploy_key" \
                ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$RELEASE_DIR/
          
          # Install dependencies (using npm install for now due to lock file sync issues)
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "cd $RELEASE_DIR && npm install --production"
          
          # Build frontend
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "cd $RELEASE_DIR/mainapp && npm install && npm run build"
          
          # Update symlink
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "ln -sfn $RELEASE_DIR /var/www/bankim/current"
          
          # Restart application (using PM2 if available)
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "cd /var/www/bankim/current && \
               (pm2 restart bankim-api 2>/dev/null || \
                pm2 start server/server-db.js --name bankim-api 2>/dev/null || \
                echo 'PM2 not found, please start manually')"
                
      - name: ✅ Verify Deployment
        run: |
          ssh -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "curl -f http://localhost:8003/api/health || echo 'Health check endpoint not available'"
          
          echo "🎉 Deployment complete!"
          echo "Server: ${{ secrets.SSH_HOST }}"
          echo "Time: $(date)"