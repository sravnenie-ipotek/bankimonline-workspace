var x=Object.defineProperty;var K=(o,r,e)=>r in o?x(o,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[r]=e;var P=(o,r,e)=>(K(o,typeof r!="symbol"?r+"":r,e),e);import{r as s}from"./react-vendor-cb72586d.js";import{u as m}from"./i18n-vendor-9853e039.js";class S{constructor(){P(this,"cache",new Map);P(this,"TTL",5*60*1e3)}set(r,e){const h=Date.now();this.cache.set(r,{data:e,timestamp:h,expires:h+this.TTL})}get(r){const e=this.cache.get(r);return e?Date.now()>e.expires?(this.cache.delete(r),null):e.data:null}clear(){this.cache.clear()}size(){return this.cache.size}}const y=new S,H=(o,r,e="options")=>{const{i18n:h}=m(),[A,D]=s.useState(!0),[p,g]=s.useState(null),[d,w]=s.useState({options:[],placeholder:void 0,label:void 0,loading:!0,error:null}),a=s.useRef(null),E=h.language||"en",f=s.useCallback(async()=>{var l,c,n,T,_;try{D(!0),g(null),a.current&&a.current.abort(),a.current=new AbortController;const i=`dropdown_${o}_${E}`,$=y.get(i);let u;if($)console.log(`✅ Cache hit for ${i}`),u=$;else{console.log(`🌐 Fetching dropdown data from API: /api/dropdowns/${o}/${E}`);const k=await fetch(`/api/dropdowns/${o}/${E}`,{signal:a.current.signal});if(!k.ok)throw new Error(`HTTP ${k.status}: ${k.statusText}`);if(u=await k.json(),u.status!=="success")throw new Error(`API Error: ${u.status}`);y.set(i,u),console.log(`💾 Cached dropdown data for ${i}`)}const b=`${o}_${r}`,I=`${b}_ph`,v=`${b}_label`,C={options:((l=u.options)==null?void 0:l[b])||[],placeholder:((c=u.placeholders)==null?void 0:c[I])||((n=u.placeholders)==null?void 0:n[b]),label:((T=u.labels)==null?void 0:T[v])||((_=u.labels)==null?void 0:_[b]),loading:!1,error:null};console.log(`🔍 Dropdown data for ${b}:`,{optionsCount:C.options.length,hasPlaceholder:!!C.placeholder,hasLabel:!!C.label,cacheHit:!!$}),w(C)}catch(i){if(i.name==="AbortError"){console.log("Request aborted");return}console.warn(`❌ Dropdown API error for ${o}/${r}:`,i);const $=i instanceof Error?i:new Error("Unknown error");g($),w({options:[],placeholder:void 0,label:void 0,loading:!1,error:$})}finally{D(!1),a.current=null}},[o,r,E]);s.useEffect(()=>(f(),()=>{a.current&&a.current.abort()}),[f]);const t={...d,loading:A,error:p};return e==="options"&&!A&&!p?t.options:t},O=o=>{const{i18n:r}=m(),[e,h]=s.useState(!0),[A,D]=s.useState(null),[p,g]=s.useState(null),d=s.useRef(null),w=r.language||"en",a=s.useCallback(async()=>{var f;try{h(!0),D(null),d.current&&d.current.abort(),d.current=new AbortController;const t=`dropdown_${o}_${w}`,l=y.get(t);if(l){console.log(`✅ Bulk cache hit for ${t}`),g(l);return}console.log(`🌐 Bulk fetching dropdowns from API: /api/dropdowns/${o}/${w}`);const c=await fetch(`/api/dropdowns/${o}/${w}`,{signal:d.current.signal});if(!c.ok)throw new Error(`HTTP ${c.status}: ${c.statusText}`);const n=await c.json();if(n.status!=="success")throw new Error(`API Error: ${n.status}`);y.set(t,n),g(n),console.log(`✅ Bulk dropdown data loaded for ${o}:`,{dropdowns:((f=n.dropdowns)==null?void 0:f.length)||0,optionGroups:Object.keys(n.options||{}).length,cacheInfo:n.cache_info})}catch(t){if(t.name==="AbortError"){console.log("Bulk request aborted");return}console.warn(`❌ Bulk dropdown API error for ${o}:`,t);const l=t instanceof Error?t:new Error("Unknown error");D(l),g(null)}finally{h(!1),d.current=null}},[o,w]);return s.useEffect(()=>(a(),()=>{d.current&&d.current.abort()}),[a]),{data:p,loading:e,error:A,getDropdownProps:f=>{var l,c,n;if(!p)return{options:[],placeholder:void 0,label:void 0};const t=`${o}_${f}`;return{options:((l=p.options)==null?void 0:l[t])||[],placeholder:(c=p.placeholders)==null?void 0:c[t],label:(n=p.labels)==null?void 0:n[t]}},refresh:a,clearCache:()=>y.clear()}};export{H as a,O as u};
