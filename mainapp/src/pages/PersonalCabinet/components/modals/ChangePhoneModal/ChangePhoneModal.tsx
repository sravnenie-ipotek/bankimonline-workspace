import React, { useState } from 'react'
import classNames from 'classnames/bind'
import { useTranslation } from 'react-i18next'
import { useNavigate } from 'react-router-dom'

import styles from './changePhoneModal.module.scss'

const cx = classNames.bind(styles)

interface ChangePhoneModalProps {
  isOpen: boolean
  onClose: () => void
  onSuccess?: (phone: string) => void
  currentPhone?: string
}

// Close Icon
const CloseIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
    <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
)

export const ChangePhoneModal: React.FC<ChangePhoneModalProps> = ({
  isOpen,
  onClose,
  onSuccess,
  currentPhone = '+972 50 123 4567'
}) => {
  const { t } = useTranslation()
  const navigate = useNavigate()
  const [countryCode, setCountryCode] = useState('+972')
  const [phone, setPhone] = useState(currentPhone.replace('+972 ', ''))
  const [isAgreedToTerms, setIsAgreedToTerms] = useState(false)
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!phone.trim() || !isAgreedToTerms) {
      return
    }

    setIsLoading(true)
    try {
      // Simulate API call for phone update
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      const fullPhone = `${countryCode} ${phone}`
      if (onSuccess) {
        onSuccess(fullPhone)
      }
      // Don't close here - PersonalCabinet will handle transition to verification
    } catch (error) {
      console.error('Error changing phone:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPhone(e.target.value)
  }

  const handleCountryCodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setCountryCode(e.target.value)
  }

  const handleUserAgreementClick = () => {
    navigate('/terms')
  }

  const handlePrivacyPolicyClick = () => {
    navigate('/privacy-policy')
  }

  const isFormValid = phone.trim() && isAgreedToTerms

  const handleBackdropClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose()
    }
  }

  if (!isOpen) return null

  return (
    <div className={cx('modal-backdrop')} onClick={handleBackdropClick}>
      <div className={cx('modal-container')}>
        <div className={cx('modal-content')}>
          {/* Action #1 - Close Button */}
          <button 
            className={cx('close-button')}
            onClick={onClose}
            type="button"
            aria-label={t('close', '–ó–∞–∫—Ä—ã—Ç—å')}
          >
            <CloseIcon />
          </button>

          {/* Header */}
          <div className={cx('modal-header')}>
            <h2 className={cx('modal-title')}>
              {t('change_phone', '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}
            </h2>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className={cx('modal-form')}>
            {/* Action #2 - Phone Input with Country Code */}
            <div className={cx('input-group')}>
              <label className={cx('input-label')}>
                {t('new_phone_number', '–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}
              </label>
              <div className={cx('phone-input-wrapper')}>
                <select 
                  value={countryCode}
                  onChange={handleCountryCodeChange}
                  className={cx('country-select')}
                >
                  <option value="+972">üáÆüá± +972</option>
                  <option value="+1">üá∫üá∏ +1</option>
                  <option value="+7">üá∑üá∫ +7</option>
                  <option value="+44">üá¨üáß +44</option>
                  <option value="+49">üá©üá™ +49</option>
                </select>
                <input
                  type="tel"
                  value={phone}
                  onChange={handlePhoneChange}
                  className={cx('phone-input')}
                  placeholder="50 123 4567"
                  required
                  autoFocus
                />
              </div>
            </div>

            {/* Action #6 - Warning Description */}
            <div className={cx('warning-section')}>
              <h3 className={cx('warning-title')}>
                {t('phone_change_title', '–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞?')}
              </h3>
              <div className={cx('warning-details')}>
                <p>
                  {t('phone_warning_p1', '–ö–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Ç–∞—Ä–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ ¬´Bankimonline Dashboards¬ª –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –≤ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')}
                </p>
                <p>
                  {t('phone_warning_p2', '–°—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}
                </p>
                <p>
                  {t('phone_warning_p3', '–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–≤–µ–¥—è –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}
                </p>
                <p>
                  {t('phone_warning_p4', '–£ –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–µ–∂–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.')}
                </p>
              </div>
              <div className={cx('confirmation-section')}>
                <p className={cx('confirmation-text')}>
                  {t('phone_confirmation_text', '–Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ:')}
                </p>
                <p>{t('phone_confirmation_p1', '–Ø —è–≤–ª—è—é—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è)')}</p>
                <p>{t('phone_confirmation_p2', '–Ø —è–≤–ª—è—é—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ Bankimonline –∏ –ø—Ä–æ—à—É –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')}</p>
              </div>
            </div>

            {/* Action #3 - User Agreement Link */}
            <div className={cx('legal-section')}>
              <p className={cx('legal-text')}>
                {t('agreement_prefix', '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª –∏ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏')}{' '}
                <span 
                  className={cx('legal-link')}
                  onClick={handleUserAgreementClick}
                >
                  {t('user_agreement', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è')}
                </span>
              </p>
            </div>

            {/* Action #4 - Agreement Checkbox */}
            <div className={cx('checkbox-section')}>
              <label className={cx('checkbox-label')}>
                <input
                  type="checkbox"
                  checked={isAgreedToTerms}
                  onChange={(e) => setIsAgreedToTerms(e.target.checked)}
                  className={cx('checkbox-input')}
                />
                <span className={cx('checkbox-custom')}></span>
                <span className={cx('checkbox-text')}>
                  {t('agree_to_terms', '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª –∏ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏')}
                </span>
              </label>
            </div>

            {/* Action #5 - Continue Button */}
            <div className={cx('button-group')}>
              <button
                type="submit"
                className={cx('continue-button')}
                disabled={!isFormValid || isLoading}
              >
                {isLoading ? t('loading', '–ó–∞–≥—Ä—É–∑–∫–∞...') : t('continue', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
} 