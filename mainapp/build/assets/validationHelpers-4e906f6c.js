const c=new Map,i=async(n,o)=>{try{const t=document.documentElement.lang||"he",a=c.get(`validation_errors_${t}`);if(a&&a[n])return a[n];const r=await fetch(`/api/content/validation_errors/${t}`);if(r.ok){const e=await r.json();if(e.content&&e.content[n]&&e.content[n].value)return c.set(`validation_errors_${t}`,e.content),e.content[n].value}return o||n}catch(t){return console.warn(`Validation error key not found: ${n}`,t),o||n}},s=(n,o)=>{try{const t=document.documentElement.lang||"he",a=c.get(`validation_errors_${t}`);return a&&a[n]?a[n]:o||n}catch{return console.warn(`Validation error key not found: ${n}`),o||n}},d=async()=>{try{const n=document.documentElement.lang||"he",o=await fetch(`/api/content/validation_errors/${n}`);if(o.ok){const t=await o.json();t.content&&(c.set(`validation_errors_${n}`,t.content),console.log("âœ… Validation errors preloaded for language:",n))}}catch(n){console.warn("Failed to preload validation errors:",n)}};export{i as a,s as g,d as p};
