const r=new Map,i=()=>{try{return typeof window<"u"&&window.i18next?window.i18next.language||"en":typeof document<"u"&&document.documentElement.lang||"en"}catch(n){return console.warn("Failed to get current language, defaulting to English:",n),"en"}},l=async(n,t)=>{try{const o=i(),a=r.get(`validation_errors_${o}`);if(a&&a[n])return a[n];const c=await fetch(`/api/content/validation_errors/${o}`);if(c.ok){const e=await c.json();if(e.content&&e.content[n]&&e.content[n].value)return r.set(`validation_errors_${o}`,e.content),e.content[n].value}return t||n}catch(o){return console.warn(`Validation error key not found: ${n}`,o),t||n}},d=(n,t)=>{try{const o=i(),a=r.get(`validation_errors_${o}`);return a&&a[n]?a[n]:t||n}catch{return console.warn(`Validation error key not found: ${n}`),t||n}},s=async()=>{try{const n=i();console.log("🔄 Preloading validation errors for language:",n);const t=await fetch(`/api/content/validation_errors/${n}`);if(t.ok){const o=await t.json();o.content&&(r.set(`validation_errors_${n}`,o.content),console.log("✅ Validation errors preloaded for language:",n),console.log("📊 Cached validation errors:",Object.keys(o.content)))}else console.warn("❌ Failed to preload validation errors, response not ok:",t.status)}catch(n){console.warn("Failed to preload validation errors:",n)}},u=async()=>{try{const n=i();console.log("🔄 Reloading validation errors for language:",n),r.delete(`validation_errors_${n}`),await s()}catch(n){console.warn("Failed to reload validation errors:",n)}};export{l as a,d as g,s as p,u as r};
