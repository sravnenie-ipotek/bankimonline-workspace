const i=new Map,s=()=>{try{return typeof window<"u"&&window.i18next?window.i18next.language||"en":typeof document<"u"&&document.documentElement.lang||"en"}catch(n){return console.warn("Failed to get current language, defaulting to English:",n),"en"}},l=async(n,o)=>{try{const t=s(),e=i.get(`validation_errors_${t}`);if(e&&e[n])return e[n];try{const a=await fetch(`/api/content/validation_errors/${t}`);if(a.ok){const r=await a.json();if(r.content&&r.content[n]&&r.content[n].value)return i.set(`validation_errors_${t}`,r.content),r.content[n].value}}catch(a){console.warn("Database fetch failed, falling back to translation system:",a)}if(typeof window<"u"&&window.i18next){const a=window.i18next.t(n);if(a&&a!==n)return a}return o||n}catch(t){return console.warn(`Validation error key not found: ${n}`,t),o||n}},d=(n,o)=>{try{const t=s(),e=i.get(`validation_errors_${t}`);if(e&&e[n])return e[n];if(typeof window<"u"&&window.i18next){const a=window.i18next.t(n);if(a&&a!==n)return a}return o||n}catch{return console.warn(`Validation error key not found: ${n}`),o||n}},c=async()=>{try{const n=s();console.log("🔄 Preloading validation errors for language:",n);try{const o=await fetch(`/api/content/validation_errors/${n}`);if(o.ok){const t=await o.json();if(t.content){i.set(`validation_errors_${n}`,t.content),console.log("✅ Validation errors preloaded from database for language:",n),console.log("📊 Cached validation errors:",Object.keys(t.content));return}}}catch(o){console.warn("Database preload failed, validation errors will use translation system:",o)}console.log("ℹ️ Validation errors will use translation system for language:",n)}catch(n){console.warn("Failed to preload validation errors:",n)}},u=async()=>{try{const n=s();console.log("🔄 Reloading validation errors for language:",n),i.delete(`validation_errors_${n}`),await c()}catch(n){console.warn("Failed to reload validation errors:",n)}};export{l as a,d as g,c as p,u as r};
