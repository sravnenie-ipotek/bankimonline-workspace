const s=new Map,i=()=>{try{return typeof window<"u"&&window.i18next?window.i18next.language||"en":typeof document<"u"&&document.documentElement.lang||"en"}catch(n){return console.warn("Failed to get current language, defaulting to English:",n),"en"}},r=async(n,t)=>{try{const o=i();console.log(`🔍 getValidationError called for key: ${n}, language: ${o}`);const e=s.get(`validation_errors_${o}`);if(e&&e[n])return console.log(`✅ Found cached validation error: ${n} -> "${e[n]}"`),e[n];try{console.log(`🌐 Fetching from database: /api/content/validation_errors/${o}`);const a=await fetch(`/api/content/validation_errors/${o}`);if(a.ok){const l=await a.json();if(console.log("📊 Database response:",l),l.content&&l.content[n]&&l.content[n].value)return s.set(`validation_errors_${o}`,l.content),console.log(`✅ Found database validation error: ${n} -> "${l.content[n].value}"`),l.content[n].value;console.log(`❌ Key ${n} not found in database response`)}else console.log("❌ Database response not ok:",a.status)}catch(a){console.warn("Database fetch failed, falling back to translation system:",a)}if(typeof window<"u"&&window.i18next){const a=window.i18next.t(n);if(a&&a!==n)return console.log(`✅ Found translation: ${n} -> "${a}"`),a;console.log(`❌ Translation not found for key: ${n}`)}return console.log(`⚠️ Using fallback for key: ${n} -> "${t||n}"`),t||n}catch(o){return console.warn(`Validation error key not found: ${n}`,o),t||n}},d=(n,t)=>{try{const o=i();console.log(`🔍 getValidationErrorSync called for key: ${n}, language: ${o}`);const e=s.get(`validation_errors_${o}`);if(e&&e[n])return console.log(`✅ Found cached validation error: ${n} -> "${e[n]}"`),e[n];if(typeof window<"u"&&window.i18next){const a=window.i18next.t(n);if(a&&a!==n)return console.log(`✅ Found translation: ${n} -> "${a}"`),a;console.log(`❌ Translation not found for key: ${n}`)}return console.log(`⚠️ Using fallback for key: ${n} -> "${t||n}"`),t||n}catch{return console.warn(`Validation error key not found: ${n}`),t||n}},c=async()=>{try{const n=i();console.log("🔄 Preloading validation errors for language:",n);try{const t=await fetch(`/api/content/validation_errors/${n}`);if(t.ok){const o=await t.json();if(o.content){s.set(`validation_errors_${n}`,o.content),console.log("✅ Validation errors preloaded from database for language:",n),console.log("📊 Cached validation errors:",Object.keys(o.content));return}}}catch(t){console.warn("Database preload failed, validation errors will use translation system:",t)}console.log("ℹ️ Validation errors will use translation system for language:",n)}catch(n){console.warn("Failed to preload validation errors:",n)}},g=async()=>{try{const n=i();console.log("🔄 Reloading validation errors for language:",n),s.delete(`validation_errors_${n}`),await c()}catch(n){console.warn("Failed to reload validation errors:",n)}};export{r as a,d as g,c as p,g as r};
